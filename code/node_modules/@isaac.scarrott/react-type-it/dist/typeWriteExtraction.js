"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var typeIt_1 = require("./typeIt");
var delay = function (time) {
    return new Promise(function (resolve) { return setTimeout(resolve, time); });
};
function getTimePerCharacter(props, lengthOfCharactersCurrentlyRendered) {
    var _a;
    var duration = (props === null || props === void 0 ? void 0 : props.duration) || 2000;
    return (duration / ((((_a = props.children) === null || _a === void 0 ? void 0 : _a.length) || 0) + ((props === null || props === void 0 ? void 0 : props.backspace) || lengthOfCharactersCurrentlyRendered || 0)));
}
function useTypewriteLinesExtraction(props) {
    var _a = react_1.useState(react_1.default.createElement(typeIt_1.TypeItInput)), elementRendered = _a[0], setElementRendered = _a[1];
    var componentMounted = react_1.useRef(false);
    function executeBackspacesAndReturnCharsCurrentlyRendered(charactersCurrentlyRendered, timePerText) {
        return __awaiter(this, void 0, void 0, function () {
            var charactersToBeRendered;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        charactersToBeRendered = charactersCurrentlyRendered.slice(0, -1);
                        setElementRendered(react_1.cloneElement(elementRendered, { style: __assign({}, props === null || props === void 0 ? void 0 : props.style) }, charactersToBeRendered));
                        return [4 /*yield*/, delay(timePerText)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, charactersToBeRendered];
                }
            });
        });
    }
    function typeIt() {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function () {
            var children, charactersCurrentlyRendered, _i, children_1, element, timePerText, _e, _f, _, _g, _h, character;
            return __generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        children = Array.isArray(props.children)
                            ? props.children
                            : [props.children];
                        charactersCurrentlyRendered = "";
                        _i = 0, children_1 = children;
                        _j.label = 1;
                    case 1:
                        if (!(_i < children_1.length)) return [3 /*break*/, 11];
                        element = children_1[_i];
                        if (((_a = element.props) === null || _a === void 0 ? void 0 : _a.children) &&
                            typeof ((_b = element.props) === null || _b === void 0 ? void 0 : _b.children) !== "string") {
                            throw new Error("Can only have strings as children inside <TypeItInput>");
                        }
                        return [4 /*yield*/, delay(element.props.delay || 0)];
                    case 2:
                        _j.sent();
                        timePerText = getTimePerCharacter(element.props, (charactersCurrentlyRendered === null || charactersCurrentlyRendered === void 0 ? void 0 : charactersCurrentlyRendered.length) || 0);
                        _e = 0, _f = Array.from(Array(((_c = element.props) === null || _c === void 0 ? void 0 : _c.backspace) || (charactersCurrentlyRendered === null || charactersCurrentlyRendered === void 0 ? void 0 : charactersCurrentlyRendered.length) || 0));
                        _j.label = 3;
                    case 3:
                        if (!(_e < _f.length)) return [3 /*break*/, 6];
                        _ = _f[_e];
                        if (!componentMounted.current) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, executeBackspacesAndReturnCharsCurrentlyRendered(charactersCurrentlyRendered, timePerText)];
                    case 4:
                        charactersCurrentlyRendered = _j.sent();
                        _j.label = 5;
                    case 5:
                        _e++;
                        return [3 /*break*/, 3];
                    case 6:
                        _g = 0, _h = ((_d = element.props) === null || _d === void 0 ? void 0 : _d.children) || [];
                        _j.label = 7;
                    case 7:
                        if (!(_g < _h.length)) return [3 /*break*/, 10];
                        character = _h[_g];
                        charactersCurrentlyRendered += character;
                        if (!componentMounted.current) {
                            return [2 /*return*/];
                        }
                        setElementRendered(react_1.cloneElement(elementRendered, { style: __assign({}, props === null || props === void 0 ? void 0 : props.style) }, charactersCurrentlyRendered));
                        return [4 /*yield*/, delay(timePerText)];
                    case 8:
                        _j.sent();
                        _j.label = 9;
                    case 9:
                        _g++;
                        return [3 /*break*/, 7];
                    case 10:
                        _i++;
                        return [3 /*break*/, 1];
                    case 11: return [2 /*return*/];
                }
            });
        });
    }
    function typewriterMediator() {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        _a.label = 1;
                    case 1: return [4 /*yield*/, typeIt()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        if ((props === null || props === void 0 ? void 0 : props.loop) && componentMounted.current) return [3 /*break*/, 1];
                        _a.label = 4;
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        e_1 = _a.sent();
                        console.log("Error in React-Type-It: " + e_1);
                        setElementRendered(react_1.default.createElement(react_1.default.Fragment));
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    }
    react_1.useEffect(function () {
        componentMounted.current = true;
        typewriterMediator();
        return function () {
            componentMounted.current = false;
        };
    }, []);
    return elementRendered;
}
exports.useTypewriteLinesExtraction = useTypewriteLinesExtraction;
//# sourceMappingURL=typeWriteExtraction.js.map