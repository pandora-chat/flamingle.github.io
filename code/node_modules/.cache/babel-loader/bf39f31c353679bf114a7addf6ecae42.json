{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction E() {// Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n    return this;\n  },\n  once: function (name, callback, ctx) {\n    var self = this;\n\n    function listener() {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    }\n\n    listener._ = callback;\n    return this.on(name, listener, ctx);\n  },\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback) liveEvents.push(evts[i]);\n      }\n    } // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n\n    liveEvents.length ? e[name] = liveEvents : delete e[name];\n    return this;\n  }\n};\nvar tinyEmitter = E;\nvar TinyEmitter = E;\ntinyEmitter.TinyEmitter = TinyEmitter;\nvar proto = typeof Element !== 'undefined' ? Element.prototype : {};\nvar vendor = proto.matches || proto.matchesSelector || proto.webkitMatchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector;\nvar matchesSelector = match;\n/**\n * Match `el` to `selector`.\n *\n * @param {Element} el\n * @param {String} selector\n * @return {Boolean}\n * @api public\n */\n\nfunction match(el, selector) {\n  if (!el || el.nodeType !== 1) return false;\n  if (vendor) return vendor.call(el, selector);\n  var nodes = el.parentNode.querySelectorAll(selector);\n\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] == el) return true;\n  }\n\n  return false;\n}\n\nvar throttleit = throttle;\n/**\n * Returns a new function that, when invoked, invokes `func` at most once per `wait` milliseconds.\n *\n * @param {Function} func Function to wrap.\n * @param {Number} wait Number of milliseconds that must elapse between `func` invocations.\n * @return {Function} A new function that wraps the `func` function passed in.\n */\n\nfunction throttle(func, wait) {\n  var ctx, args, rtn, timeoutID; // caching\n\n  var last = 0;\n  return function throttled() {\n    ctx = this;\n    args = arguments;\n    var delta = new Date() - last;\n    if (!timeoutID) if (delta >= wait) call();else timeoutID = setTimeout(call, wait - delta);\n    return rtn;\n  };\n\n  function call() {\n    timeoutID = 0;\n    last = +new Date();\n    rtn = func.apply(ctx, args);\n    ctx = null;\n    args = null;\n  }\n}\n\nvar arrayParallel = function parallel(fns, context, callback) {\n  if (!callback) {\n    if (typeof context === 'function') {\n      callback = context;\n      context = null;\n    } else {\n      callback = noop;\n    }\n  }\n\n  var pending = fns && fns.length;\n  if (!pending) return callback(null, []);\n  var finished = false;\n  var results = new Array(pending);\n  fns.forEach(context ? function (fn, i) {\n    fn.call(context, maybeDone(i));\n  } : function (fn, i) {\n    fn(maybeDone(i));\n  });\n\n  function maybeDone(i) {\n    return function (err, result) {\n      if (finished) return;\n\n      if (err) {\n        callback(err, results);\n        finished = true;\n        return;\n      }\n\n      results[i] = result;\n      if (! --pending) callback(null, results);\n    };\n  }\n};\n\nfunction noop() {}\n/**\n * Always returns a numeric value, given a value. Logic from jQuery's `isNumeric`.\n * @param {*} value Possibly numeric value.\n * @return {number} `value` or zero if `value` isn't numeric.\n */\n\n\nfunction getNumber(value) {\n  return parseFloat(value) || 0;\n}\n\nvar Point = /*#__PURE__*/function () {\n  /**\n   * Represents a coordinate pair.\n   * @param {number} [x=0] X.\n   * @param {number} [y=0] Y.\n   */\n  function Point(x, y) {\n    _classCallCheck(this, Point);\n\n    this.x = getNumber(x);\n    this.y = getNumber(y);\n  }\n  /**\n   * Whether two points are equal.\n   * @param {Point} a Point A.\n   * @param {Point} b Point B.\n   * @return {boolean}\n   */\n\n\n  _createClass(Point, null, [{\n    key: \"equals\",\n    value: function equals(a, b) {\n      return a.x === b.x && a.y === b.y;\n    }\n  }]);\n\n  return Point;\n}();\n\nvar Rect = /*#__PURE__*/function () {\n  /**\n   * Class for representing rectangular regions.\n   * https://github.com/google/closure-library/blob/master/closure/goog/math/rect.js\n   * @param {number} x Left.\n   * @param {number} y Top.\n   * @param {number} w Width.\n   * @param {number} h Height.\n   * @param {number} id Identifier\n   * @constructor\n   */\n  function Rect(x, y, w, h, id) {\n    _classCallCheck(this, Rect);\n\n    this.id = id;\n    /** @type {number} */\n\n    this.left = x;\n    /** @type {number} */\n\n    this.top = y;\n    /** @type {number} */\n\n    this.width = w;\n    /** @type {number} */\n\n    this.height = h;\n  }\n  /**\n   * Returns whether two rectangles intersect.\n   * @param {Rect} a A Rectangle.\n   * @param {Rect} b A Rectangle.\n   * @return {boolean} Whether a and b intersect.\n   */\n\n\n  _createClass(Rect, null, [{\n    key: \"intersects\",\n    value: function intersects(a, b) {\n      return a.left < b.left + b.width && b.left < a.left + a.width && a.top < b.top + b.height && b.top < a.top + a.height;\n    }\n  }]);\n\n  return Rect;\n}();\n\nvar Classes = {\n  BASE: 'shuffle',\n  SHUFFLE_ITEM: 'shuffle-item',\n  VISIBLE: 'shuffle-item--visible',\n  HIDDEN: 'shuffle-item--hidden'\n};\nvar id = 0;\n\nvar ShuffleItem = /*#__PURE__*/function () {\n  function ShuffleItem(element) {\n    _classCallCheck(this, ShuffleItem);\n\n    id += 1;\n    this.id = id;\n    this.element = element;\n    /**\n     * Used to separate items for layout and shrink.\n     */\n\n    this.isVisible = true;\n    /**\n     * Used to determine if a transition will happen. By the time the _layout\n     * and _shrink methods get the ShuffleItem instances, the `isVisible` value\n     * has already been changed by the separation methods, so this property is\n     * needed to know if the item was visible/hidden before the shrink/layout.\n     */\n\n    this.isHidden = false;\n  }\n\n  _createClass(ShuffleItem, [{\n    key: \"show\",\n    value: function show() {\n      this.isVisible = true;\n      this.element.classList.remove(Classes.HIDDEN);\n      this.element.classList.add(Classes.VISIBLE);\n      this.element.removeAttribute('aria-hidden');\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.isVisible = false;\n      this.element.classList.remove(Classes.VISIBLE);\n      this.element.classList.add(Classes.HIDDEN);\n      this.element.setAttribute('aria-hidden', true);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      this.addClasses([Classes.SHUFFLE_ITEM, Classes.VISIBLE]);\n      this.applyCss(ShuffleItem.Css.INITIAL);\n      this.scale = ShuffleItem.Scale.VISIBLE;\n      this.point = new Point();\n    }\n  }, {\n    key: \"addClasses\",\n    value: function addClasses(classes) {\n      var _this = this;\n\n      classes.forEach(function (className) {\n        _this.element.classList.add(className);\n      });\n    }\n  }, {\n    key: \"removeClasses\",\n    value: function removeClasses(classes) {\n      var _this2 = this;\n\n      classes.forEach(function (className) {\n        _this2.element.classList.remove(className);\n      });\n    }\n  }, {\n    key: \"applyCss\",\n    value: function applyCss(obj) {\n      var _this3 = this;\n\n      Object.keys(obj).forEach(function (key) {\n        _this3.element.style[key] = obj[key];\n      });\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.removeClasses([Classes.HIDDEN, Classes.VISIBLE, Classes.SHUFFLE_ITEM]);\n      this.element.removeAttribute('style');\n      this.element = null;\n    }\n  }]);\n\n  return ShuffleItem;\n}();\n\nShuffleItem.Css = {\n  INITIAL: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    visibility: 'visible',\n    willChange: 'transform'\n  },\n  VISIBLE: {\n    before: {\n      opacity: 1,\n      visibility: 'visible'\n    },\n    after: {\n      transitionDelay: ''\n    }\n  },\n  HIDDEN: {\n    before: {\n      opacity: 0\n    },\n    after: {\n      visibility: 'hidden',\n      transitionDelay: ''\n    }\n  }\n};\nShuffleItem.Scale = {\n  VISIBLE: 1,\n  HIDDEN: 0.001\n};\nvar value = null;\n\nvar testComputedSize = function () {\n  if (value !== null) {\n    return value;\n  }\n\n  var element = document.body || document.documentElement;\n  var e = document.createElement('div');\n  e.style.cssText = 'width:10px;padding:2px;box-sizing:border-box;';\n  element.appendChild(e);\n  value = window.getComputedStyle(e, null).width === '10px';\n  element.removeChild(e);\n  return value;\n};\n/**\n * Retrieve the computed style for an element, parsed as a float.\n * @param {Element} element Element to get style for.\n * @param {string} style Style property.\n * @param {CSSStyleDeclaration} [styles] Optionally include clean styles to\n *     use instead of asking for them again.\n * @return {number} The parsed computed value or zero if that fails because IE\n *     will return 'auto' when the element doesn't have margins instead of\n *     the computed style.\n */\n\n\nfunction getNumberStyle(element, style) {\n  var styles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window.getComputedStyle(element, null);\n  var value = getNumber(styles[style]); // Support IE<=11 and W3C spec.\n\n  if (!testComputedSize() && style === 'width') {\n    value += getNumber(styles.paddingLeft) + getNumber(styles.paddingRight) + getNumber(styles.borderLeftWidth) + getNumber(styles.borderRightWidth);\n  } else if (!testComputedSize() && style === 'height') {\n    value += getNumber(styles.paddingTop) + getNumber(styles.paddingBottom) + getNumber(styles.borderTopWidth) + getNumber(styles.borderBottomWidth);\n  }\n\n  return value;\n}\n/**\n * Fisher-Yates shuffle.\n * http://stackoverflow.com/a/962890/373422\n * https://bost.ocks.org/mike/shuffle/\n * @param {Array} array Array to shuffle.\n * @return {Array} Randomly sorted array.\n */\n\n\nfunction randomize(array) {\n  var n = array.length;\n\n  while (n) {\n    n -= 1;\n    var i = Math.floor(Math.random() * (n + 1));\n    var temp = array[i];\n    array[i] = array[n];\n    array[n] = temp;\n  }\n\n  return array;\n}\n\nvar defaults = {\n  // Use array.reverse() to reverse the results\n  reverse: false,\n  // Sorting function\n  by: null,\n  // Custom sort function\n  compare: null,\n  // If true, this will skip the sorting and return a randomized order in the array\n  randomize: false,\n  // Determines which property of each item in the array is passed to the\n  // sorting method.\n  key: 'element'\n};\n/**\n * You can return `undefined` from the `by` function to revert to DOM order.\n * @param {Array<T>} arr Array to sort.\n * @param {SortOptions} options Sorting options.\n * @return {Array<T>}\n */\n\nfunction sorter(arr, options) {\n  var opts = Object.assign({}, defaults, options);\n  var original = Array.from(arr);\n  var revert = false;\n\n  if (!arr.length) {\n    return [];\n  }\n\n  if (opts.randomize) {\n    return randomize(arr);\n  } // Sort the elements by the opts.by function.\n  // If we don't have opts.by, default to DOM order\n\n\n  if (typeof opts.by === 'function') {\n    arr.sort(function (a, b) {\n      // Exit early if we already know we want to revert\n      if (revert) {\n        return 0;\n      }\n\n      var valA = opts.by(a[opts.key]);\n      var valB = opts.by(b[opts.key]); // If both values are undefined, use the DOM order\n\n      if (valA === undefined && valB === undefined) {\n        revert = true;\n        return 0;\n      }\n\n      if (valA < valB || valA === 'sortFirst' || valB === 'sortLast') {\n        return -1;\n      }\n\n      if (valA > valB || valA === 'sortLast' || valB === 'sortFirst') {\n        return 1;\n      }\n\n      return 0;\n    });\n  } else if (typeof opts.compare === 'function') {\n    arr.sort(opts.compare);\n  } // Revert to the original array if necessary\n\n\n  if (revert) {\n    return original;\n  }\n\n  if (opts.reverse) {\n    arr.reverse();\n  }\n\n  return arr;\n}\n\nvar transitions = {};\nvar eventName = 'transitionend';\nvar count = 0;\n\nfunction uniqueId() {\n  count += 1;\n  return eventName + count;\n}\n\nfunction cancelTransitionEnd(id) {\n  if (transitions[id]) {\n    transitions[id].element.removeEventListener(eventName, transitions[id].listener);\n    transitions[id] = null;\n    return true;\n  }\n\n  return false;\n}\n\nfunction onTransitionEnd(element, callback) {\n  var id = uniqueId();\n\n  var listener = function listener(evt) {\n    if (evt.currentTarget === evt.target) {\n      cancelTransitionEnd(id);\n      callback(evt);\n    }\n  };\n\n  element.addEventListener(eventName, listener);\n  transitions[id] = {\n    element: element,\n    listener: listener\n  };\n  return id;\n}\n\nfunction arrayMax(array) {\n  return Math.max.apply(Math, array); // eslint-disable-line prefer-spread\n}\n\nfunction arrayMin(array) {\n  return Math.min.apply(Math, array); // eslint-disable-line prefer-spread\n}\n/**\n * Determine the number of columns an items spans.\n * @param {number} itemWidth Width of the item.\n * @param {number} columnWidth Width of the column (includes gutter).\n * @param {number} columns Total number of columns\n * @param {number} threshold A buffer value for the size of the column to fit.\n * @return {number}\n */\n\n\nfunction getColumnSpan(itemWidth, columnWidth, columns, threshold) {\n  var columnSpan = itemWidth / columnWidth; // If the difference between the rounded column span number and the\n  // calculated column span number is really small, round the number to\n  // make it fit.\n\n  if (Math.abs(Math.round(columnSpan) - columnSpan) < threshold) {\n    // e.g. columnSpan = 4.0089945390298745\n    columnSpan = Math.round(columnSpan);\n  } // Ensure the column span is not more than the amount of columns in the whole layout.\n\n\n  return Math.min(Math.ceil(columnSpan), columns);\n}\n/**\n * Retrieves the column set to use for placement.\n * @param {number} columnSpan The number of columns this current item spans.\n * @param {number} columns The total columns in the grid.\n * @return {Array.<number>} An array of numbers represeting the column set.\n */\n\n\nfunction getAvailablePositions(positions, columnSpan, columns) {\n  // The item spans only one column.\n  if (columnSpan === 1) {\n    return positions;\n  } // The item spans more than one column, figure out how many different\n  // places it could fit horizontally.\n  // The group count is the number of places within the positions this block\n  // could fit, ignoring the current positions of items.\n  // Imagine a 2 column brick as the second item in a 4 column grid with\n  // 10px height each. Find the places it would fit:\n  // [20, 10, 10, 0]\n  //  |   |   |\n  //  *   *   *\n  //\n  // Then take the places which fit and get the bigger of the two:\n  // max([20, 10]), max([10, 10]), max([10, 0]) = [20, 10, 10]\n  //\n  // Next, find the first smallest number (the short column).\n  // [20, 10, 10]\n  //      |\n  //      *\n  //\n  // And that's where it should be placed!\n  //\n  // Another example where the second column's item extends past the first:\n  // [10, 20, 10, 0] => [20, 20, 10] => 10\n\n\n  var available = []; // For how many possible positions for this item there are.\n\n  for (var i = 0; i <= columns - columnSpan; i++) {\n    // Find the bigger value for each place it could fit.\n    available.push(arrayMax(positions.slice(i, i + columnSpan)));\n  }\n\n  return available;\n}\n/**\n * Find index of short column, the first from the left where this item will go.\n *\n * @param {Array.<number>} positions The array to search for the smallest number.\n * @param {number} buffer Optional buffer which is very useful when the height\n *     is a percentage of the width.\n * @return {number} Index of the short column.\n */\n\n\nfunction getShortColumn(positions, buffer) {\n  var minPosition = arrayMin(positions);\n\n  for (var i = 0, len = positions.length; i < len; i++) {\n    if (positions[i] >= minPosition - buffer && positions[i] <= minPosition + buffer) {\n      return i;\n    }\n  }\n\n  return 0;\n}\n/**\n * Determine the location of the next item, based on its size.\n * @param {Object} itemSize Object with width and height.\n * @param {Array.<number>} positions Positions of the other current items.\n * @param {number} gridSize The column width or row height.\n * @param {number} total The total number of columns or rows.\n * @param {number} threshold Buffer value for the column to fit.\n * @param {number} buffer Vertical buffer for the height of items.\n * @return {Point}\n */\n\n\nfunction getItemPosition(_ref) {\n  var itemSize = _ref.itemSize,\n      positions = _ref.positions,\n      gridSize = _ref.gridSize,\n      total = _ref.total,\n      threshold = _ref.threshold,\n      buffer = _ref.buffer;\n  var span = getColumnSpan(itemSize.width, gridSize, total, threshold);\n  var setY = getAvailablePositions(positions, span, total);\n  var shortColumnIndex = getShortColumn(setY, buffer); // Position the item\n\n  var point = new Point(gridSize * shortColumnIndex, setY[shortColumnIndex]); // Update the columns array with the new values for each column.\n  // e.g. before the update the columns could be [250, 0, 0, 0] for an item\n  // which spans 2 columns. After it would be [250, itemHeight, itemHeight, 0].\n\n  var setHeight = setY[shortColumnIndex] + itemSize.height;\n\n  for (var i = 0; i < span; i++) {\n    positions[shortColumnIndex + i] = setHeight;\n  }\n\n  return point;\n}\n/**\n * This method attempts to center items. This method could potentially be slow\n * with a large number of items because it must place items, then check every\n * previous item to ensure there is no overlap.\n * @param {Array.<Rect>} itemRects Item data objects.\n * @param {number} containerWidth Width of the containing element.\n * @return {Array.<Point>}\n */\n\n\nfunction getCenteredPositions(itemRects, containerWidth) {\n  var rowMap = {}; // Populate rows by their offset because items could jump between rows like:\n  // a   c\n  //  bbb\n\n  itemRects.forEach(function (itemRect) {\n    if (rowMap[itemRect.top]) {\n      // Push the point to the last row array.\n      rowMap[itemRect.top].push(itemRect);\n    } else {\n      // Start of a new row.\n      rowMap[itemRect.top] = [itemRect];\n    }\n  }); // For each row, find the end of the last item, then calculate\n  // the remaining space by dividing it by 2. Then add that\n  // offset to the x position of each point.\n\n  var rects = [];\n  var rows = [];\n  var centeredRows = [];\n  Object.keys(rowMap).forEach(function (key) {\n    var itemRects = rowMap[key];\n    rows.push(itemRects);\n    var lastItem = itemRects[itemRects.length - 1];\n    var end = lastItem.left + lastItem.width;\n    var offset = Math.round((containerWidth - end) / 2);\n    var finalRects = itemRects;\n    var canMove = false;\n\n    if (offset > 0) {\n      var newRects = [];\n      canMove = itemRects.every(function (r) {\n        var newRect = new Rect(r.left + offset, r.top, r.width, r.height, r.id); // Check all current rects to make sure none overlap.\n\n        var noOverlap = !rects.some(function (r) {\n          return Rect.intersects(newRect, r);\n        });\n        newRects.push(newRect);\n        return noOverlap;\n      }); // If none of the rectangles overlapped, the whole group can be centered.\n\n      if (canMove) {\n        finalRects = newRects;\n      }\n    } // If the items are not going to be offset, ensure that the original\n    // placement for this row will not overlap previous rows (row-spanning\n    // elements could be in the way).\n\n\n    if (!canMove) {\n      var intersectingRect;\n      var hasOverlap = itemRects.some(function (itemRect) {\n        return rects.some(function (r) {\n          var intersects = Rect.intersects(itemRect, r);\n\n          if (intersects) {\n            intersectingRect = r;\n          }\n\n          return intersects;\n        });\n      }); // If there is any overlap, replace the overlapping row with the original.\n\n      if (hasOverlap) {\n        var rowIndex = centeredRows.findIndex(function (items) {\n          return items.includes(intersectingRect);\n        });\n        centeredRows.splice(rowIndex, 1, rows[rowIndex]);\n      }\n    }\n\n    rects = rects.concat(finalRects);\n    centeredRows.push(finalRects);\n  }); // Reduce array of arrays to a single array of points.\n  // https://stackoverflow.com/a/10865042/373422\n  // Then reset sort back to how the items were passed to this method.\n  // Remove the wrapper object with index, map to a Point.\n\n  return [].concat.apply([], centeredRows) // eslint-disable-line prefer-spread\n  .sort(function (a, b) {\n    return a.id - b.id;\n  }).map(function (itemRect) {\n    return new Point(itemRect.left, itemRect.top);\n  });\n}\n/**\n * Hyphenates a javascript style string to a css one. For example:\n * MozBoxSizing -> -moz-box-sizing.\n * @param {string} str The string to hyphenate.\n * @return {string} The hyphenated string.\n */\n\n\nfunction hyphenate(str) {\n  return str.replace(/([A-Z])/g, function (str, m1) {\n    return \"-\".concat(m1.toLowerCase());\n  });\n}\n\nfunction arrayUnique(x) {\n  return Array.from(new Set(x));\n} // Used for unique instance variables\n\n\nvar id$1 = 0;\n\nvar Shuffle = /*#__PURE__*/function (_TinyEmitter) {\n  _inherits(Shuffle, _TinyEmitter);\n  /**\n   * Categorize, sort, and filter a responsive grid of items.\n   *\n   * @param {Element} element An element which is the parent container for the grid items.\n   * @param {Object} [options=Shuffle.options] Options object.\n   * @constructor\n   */\n\n\n  function Shuffle(element) {\n    var _this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Shuffle);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Shuffle).call(this));\n    _this.options = Object.assign({}, Shuffle.options, options); // Allow misspelling of delimiter since that's how it used to be.\n    // Remove in v6.\n\n    if (_this.options.delimeter) {\n      _this.options.delimiter = _this.options.delimeter;\n    }\n\n    _this.lastSort = {};\n    _this.group = Shuffle.ALL_ITEMS;\n    _this.lastFilter = Shuffle.ALL_ITEMS;\n    _this.isEnabled = true;\n    _this.isDestroyed = false;\n    _this.isInitialized = false;\n    _this._transitions = [];\n    _this.isTransitioning = false;\n    _this._queue = [];\n\n    var el = _this._getElementOption(element);\n\n    if (!el) {\n      throw new TypeError('Shuffle needs to be initialized with an element.');\n    }\n\n    _this.element = el;\n    _this.id = 'shuffle_' + id$1;\n    id$1 += 1;\n\n    _this._init();\n\n    _this.isInitialized = true;\n    return _this;\n  }\n\n  _createClass(Shuffle, [{\n    key: \"_init\",\n    value: function _init() {\n      this.items = this._getItems();\n      this.options.sizer = this._getElementOption(this.options.sizer); // Add class and invalidate styles\n\n      this.element.classList.add(Shuffle.Classes.BASE); // Set initial css for each item\n\n      this._initItems(this.items); // Bind resize events\n\n\n      this._onResize = this._getResizeFunction();\n      window.addEventListener('resize', this._onResize); // If the page has not already emitted the `load` event, call layout on load.\n      // This avoids layout issues caused by images and fonts loading after the\n      // instance has been initialized.\n\n      if (document.readyState !== 'complete') {\n        var layout = this.layout.bind(this);\n        window.addEventListener('load', function onLoad() {\n          window.removeEventListener('load', onLoad);\n          layout();\n        });\n      } // Get container css all in one request. Causes reflow\n\n\n      var containerCss = window.getComputedStyle(this.element, null);\n      var containerWidth = Shuffle.getSize(this.element).width; // Add styles to the container if it doesn't have them.\n\n      this._validateStyles(containerCss); // We already got the container's width above, no need to cause another\n      // reflow getting it again... Calculate the number of columns there will be\n\n\n      this._setColumns(containerWidth); // Kick off!\n\n\n      this.filter(this.options.group, this.options.initialSort); // The shuffle items haven't had transitions set on them yet so the user\n      // doesn't see the first layout. Set them now that the first layout is done.\n      // First, however, a synchronous layout must be caused for the previous\n      // styles to be applied without transitions.\n\n      this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n\n      this.setItemTransitions(this.items);\n      this.element.style.transition = \"height \".concat(this.options.speed, \"ms \").concat(this.options.easing);\n    }\n    /**\n     * Returns a throttled and proxied function for the resize handler.\n     * @return {function}\n     * @private\n     */\n\n  }, {\n    key: \"_getResizeFunction\",\n    value: function _getResizeFunction() {\n      var resizeFunction = this._handleResize.bind(this);\n\n      return this.options.throttle ? this.options.throttle(resizeFunction, this.options.throttleTime) : resizeFunction;\n    }\n    /**\n     * Retrieve an element from an option.\n     * @param {string|jQuery|Element} option The option to check.\n     * @return {?Element} The plain element or null.\n     * @private\n     */\n\n  }, {\n    key: \"_getElementOption\",\n    value: function _getElementOption(option) {\n      // If column width is a string, treat is as a selector and search for the\n      // sizer element within the outermost container\n      if (typeof option === 'string') {\n        return this.element.querySelector(option);\n      } // Check for an element\n\n\n      if (option && option.nodeType && option.nodeType === 1) {\n        return option;\n      } // Check for jQuery object\n\n\n      if (option && option.jquery) {\n        return option[0];\n      }\n\n      return null;\n    }\n    /**\n     * Ensures the shuffle container has the css styles it needs applied to it.\n     * @param {Object} styles Key value pairs for position and overflow.\n     * @private\n     */\n\n  }, {\n    key: \"_validateStyles\",\n    value: function _validateStyles(styles) {\n      // Position cannot be static.\n      if (styles.position === 'static') {\n        this.element.style.position = 'relative';\n      } // Overflow has to be hidden.\n\n\n      if (styles.overflow !== 'hidden') {\n        this.element.style.overflow = 'hidden';\n      }\n    }\n    /**\n     * Filter the elements by a category.\n     * @param {string|string[]|function(Element):boolean} [category] Category to\n     *     filter by. If it's given, the last category will be used to filter the items.\n     * @param {Array} [collection] Optionally filter a collection. Defaults to\n     *     all the items.\n     * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\n     * @private\n     */\n\n  }, {\n    key: \"_filter\",\n    value: function _filter() {\n      var category = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.lastFilter;\n      var collection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.items;\n\n      var set = this._getFilteredSets(category, collection); // Individually add/remove hidden/visible classes\n\n\n      this._toggleFilterClasses(set); // Save the last filter in case elements are appended.\n\n\n      this.lastFilter = category; // This is saved mainly because providing a filter function (like searching)\n      // will overwrite the `lastFilter` property every time its called.\n\n      if (typeof category === 'string') {\n        this.group = category;\n      }\n\n      return set;\n    }\n    /**\n     * Returns an object containing the visible and hidden elements.\n     * @param {string|string[]|function(Element):boolean} category Category or function to filter by.\n     * @param {ShuffleItem[]} items A collection of items to filter.\n     * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\n     * @private\n     */\n\n  }, {\n    key: \"_getFilteredSets\",\n    value: function _getFilteredSets(category, items) {\n      var _this2 = this;\n\n      var visible = [];\n      var hidden = []; // category === 'all', add visible class to everything\n\n      if (category === Shuffle.ALL_ITEMS) {\n        visible = items; // Loop through each item and use provided function to determine\n        // whether to hide it or not.\n      } else {\n        items.forEach(function (item) {\n          if (_this2._doesPassFilter(category, item.element)) {\n            visible.push(item);\n          } else {\n            hidden.push(item);\n          }\n        });\n      }\n\n      return {\n        visible: visible,\n        hidden: hidden\n      };\n    }\n    /**\n     * Test an item to see if it passes a category.\n     * @param {string|string[]|function():boolean} category Category or function to filter by.\n     * @param {Element} element An element to test.\n     * @return {boolean} Whether it passes the category/filter.\n     * @private\n     */\n\n  }, {\n    key: \"_doesPassFilter\",\n    value: function _doesPassFilter(category, element) {\n      if (typeof category === 'function') {\n        return category.call(element, element, this);\n      } // Check each element's data-groups attribute against the given category.\n\n\n      var attr = element.getAttribute('data-' + Shuffle.FILTER_ATTRIBUTE_KEY);\n      var keys = this.options.delimiter ? attr.split(this.options.delimiter) : JSON.parse(attr);\n\n      function testCategory(category) {\n        return keys.includes(category);\n      }\n\n      if (Array.isArray(category)) {\n        if (this.options.filterMode === Shuffle.FilterMode.ANY) {\n          return category.some(testCategory);\n        }\n\n        return category.every(testCategory);\n      }\n\n      return keys.includes(category);\n    }\n    /**\n     * Toggles the visible and hidden class names.\n     * @param {{visible, hidden}} Object with visible and hidden arrays.\n     * @private\n     */\n\n  }, {\n    key: \"_toggleFilterClasses\",\n    value: function _toggleFilterClasses(_ref) {\n      var visible = _ref.visible,\n          hidden = _ref.hidden;\n      visible.forEach(function (item) {\n        item.show();\n      });\n      hidden.forEach(function (item) {\n        item.hide();\n      });\n    }\n    /**\n     * Set the initial css for each item\n     * @param {ShuffleItem[]} items Set to initialize.\n     * @private\n     */\n\n  }, {\n    key: \"_initItems\",\n    value: function _initItems(items) {\n      items.forEach(function (item) {\n        item.init();\n      });\n    }\n    /**\n     * Remove element reference and styles.\n     * @param {ShuffleItem[]} items Set to dispose.\n     * @private\n     */\n\n  }, {\n    key: \"_disposeItems\",\n    value: function _disposeItems(items) {\n      items.forEach(function (item) {\n        item.dispose();\n      });\n    }\n    /**\n     * Updates the visible item count.\n     * @private\n     */\n\n  }, {\n    key: \"_updateItemCount\",\n    value: function _updateItemCount() {\n      this.visibleItems = this._getFilteredItems().length;\n    }\n    /**\n     * Sets css transform transition on a group of elements. This is not executed\n     * at the same time as `item.init` so that transitions don't occur upon\n     * initialization of a new Shuffle instance.\n     * @param {ShuffleItem[]} items Shuffle items to set transitions on.\n     * @protected\n     */\n\n  }, {\n    key: \"setItemTransitions\",\n    value: function setItemTransitions(items) {\n      var _this$options = this.options,\n          speed = _this$options.speed,\n          easing = _this$options.easing;\n      var positionProps = this.options.useTransforms ? ['transform'] : ['top', 'left']; // Allow users to transtion other properties if they exist in the `before`\n      // css mapping of the shuffle item.\n\n      var cssProps = Object.keys(ShuffleItem.Css.HIDDEN.before).map(function (k) {\n        return hyphenate(k);\n      });\n      var properties = positionProps.concat(cssProps).join();\n      items.forEach(function (item) {\n        item.element.style.transitionDuration = speed + 'ms';\n        item.element.style.transitionTimingFunction = easing;\n        item.element.style.transitionProperty = properties;\n      });\n    }\n  }, {\n    key: \"_getItems\",\n    value: function _getItems() {\n      var _this3 = this;\n\n      return Array.from(this.element.children).filter(function (el) {\n        return matchesSelector(el, _this3.options.itemSelector);\n      }).map(function (el) {\n        return new ShuffleItem(el);\n      });\n    }\n    /**\n     * Combine the current items array with a new one and sort it by DOM order.\n     * @param {ShuffleItem[]} items Items to track.\n     * @return {ShuffleItem[]}\n     */\n\n  }, {\n    key: \"_mergeNewItems\",\n    value: function _mergeNewItems(items) {\n      var children = Array.from(this.element.children);\n      return sorter(this.items.concat(items), {\n        by: function by(element) {\n          return children.indexOf(element);\n        }\n      });\n    }\n  }, {\n    key: \"_getFilteredItems\",\n    value: function _getFilteredItems() {\n      return this.items.filter(function (item) {\n        return item.isVisible;\n      });\n    }\n  }, {\n    key: \"_getConcealedItems\",\n    value: function _getConcealedItems() {\n      return this.items.filter(function (item) {\n        return !item.isVisible;\n      });\n    }\n    /**\n     * Returns the column size, based on column width and sizer options.\n     * @param {number} containerWidth Size of the parent container.\n     * @param {number} gutterSize Size of the gutters.\n     * @return {number}\n     * @private\n     */\n\n  }, {\n    key: \"_getColumnSize\",\n    value: function _getColumnSize(containerWidth, gutterSize) {\n      var size; // If the columnWidth property is a function, then the grid is fluid\n\n      if (typeof this.options.columnWidth === 'function') {\n        size = this.options.columnWidth(containerWidth); // columnWidth option isn't a function, are they using a sizing element?\n      } else if (this.options.sizer) {\n        size = Shuffle.getSize(this.options.sizer).width; // if not, how about the explicitly set option?\n      } else if (this.options.columnWidth) {\n        size = this.options.columnWidth; // or use the size of the first item\n      } else if (this.items.length > 0) {\n        size = Shuffle.getSize(this.items[0].element, true).width; // if there's no items, use size of container\n      } else {\n        size = containerWidth;\n      } // Don't let them set a column width of zero.\n\n\n      if (size === 0) {\n        size = containerWidth;\n      }\n\n      return size + gutterSize;\n    }\n    /**\n     * Returns the gutter size, based on gutter width and sizer options.\n     * @param {number} containerWidth Size of the parent container.\n     * @return {number}\n     * @private\n     */\n\n  }, {\n    key: \"_getGutterSize\",\n    value: function _getGutterSize(containerWidth) {\n      var size;\n\n      if (typeof this.options.gutterWidth === 'function') {\n        size = this.options.gutterWidth(containerWidth);\n      } else if (this.options.sizer) {\n        size = getNumberStyle(this.options.sizer, 'marginLeft');\n      } else {\n        size = this.options.gutterWidth;\n      }\n\n      return size;\n    }\n    /**\n     * Calculate the number of columns to be used. Gets css if using sizer element.\n     * @param {number} [containerWidth] Optionally specify a container width if\n     *    it's already available.\n     */\n\n  }, {\n    key: \"_setColumns\",\n    value: function _setColumns() {\n      var containerWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Shuffle.getSize(this.element).width;\n\n      var gutter = this._getGutterSize(containerWidth);\n\n      var columnWidth = this._getColumnSize(containerWidth, gutter);\n\n      var calculatedColumns = (containerWidth + gutter) / columnWidth; // Widths given from getStyles are not precise enough...\n\n      if (Math.abs(Math.round(calculatedColumns) - calculatedColumns) < this.options.columnThreshold) {\n        // e.g. calculatedColumns = 11.998876\n        calculatedColumns = Math.round(calculatedColumns);\n      }\n\n      this.cols = Math.max(Math.floor(calculatedColumns || 0), 1);\n      this.containerWidth = containerWidth;\n      this.colWidth = columnWidth;\n    }\n    /**\n     * Adjust the height of the grid\n     */\n\n  }, {\n    key: \"_setContainerSize\",\n    value: function _setContainerSize() {\n      this.element.style.height = this._getContainerSize() + 'px';\n    }\n    /**\n     * Based on the column heights, it returns the biggest one.\n     * @return {number}\n     * @private\n     */\n\n  }, {\n    key: \"_getContainerSize\",\n    value: function _getContainerSize() {\n      return arrayMax(this.positions);\n    }\n    /**\n     * Get the clamped stagger amount.\n     * @param {number} index Index of the item to be staggered.\n     * @return {number}\n     */\n\n  }, {\n    key: \"_getStaggerAmount\",\n    value: function _getStaggerAmount(index) {\n      return Math.min(index * this.options.staggerAmount, this.options.staggerAmountMax);\n    }\n    /**\n     * Emit an event from this instance.\n     * @param {string} name Event name.\n     * @param {Object} [data={}] Optional object data.\n     */\n\n  }, {\n    key: \"_dispatch\",\n    value: function _dispatch(name) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (this.isDestroyed) {\n        return;\n      }\n\n      data.shuffle = this;\n      this.emit(name, data);\n    }\n    /**\n     * Zeros out the y columns array, which is used to determine item placement.\n     * @private\n     */\n\n  }, {\n    key: \"_resetCols\",\n    value: function _resetCols() {\n      var i = this.cols;\n      this.positions = [];\n\n      while (i) {\n        i -= 1;\n        this.positions.push(0);\n      }\n    }\n    /**\n     * Loops through each item that should be shown and calculates the x, y position.\n     * @param {ShuffleItem[]} items Array of items that will be shown/layed\n     *     out in order in their array.\n     */\n\n  }, {\n    key: \"_layout\",\n    value: function _layout(items) {\n      var _this4 = this;\n\n      var itemPositions = this._getNextPositions(items);\n\n      var count = 0;\n      items.forEach(function (item, i) {\n        function callback() {\n          item.applyCss(ShuffleItem.Css.VISIBLE.after);\n        } // If the item will not change its position, do not add it to the render\n        // queue. Transitions don't fire when setting a property to the same value.\n\n\n        if (Point.equals(item.point, itemPositions[i]) && !item.isHidden) {\n          item.applyCss(ShuffleItem.Css.VISIBLE.before);\n          callback();\n          return;\n        }\n\n        item.point = itemPositions[i];\n        item.scale = ShuffleItem.Scale.VISIBLE;\n        item.isHidden = false; // Clone the object so that the `before` object isn't modified when the\n        // transition delay is added.\n\n        var styles = _this4.getStylesForTransition(item, ShuffleItem.Css.VISIBLE.before);\n\n        styles.transitionDelay = _this4._getStaggerAmount(count) + 'ms';\n\n        _this4._queue.push({\n          item: item,\n          styles: styles,\n          callback: callback\n        });\n\n        count += 1;\n      });\n    }\n    /**\n     * Return an array of Point instances representing the future positions of\n     * each item.\n     * @param {ShuffleItem[]} items Array of sorted shuffle items.\n     * @return {Point[]}\n     * @private\n     */\n\n  }, {\n    key: \"_getNextPositions\",\n    value: function _getNextPositions(items) {\n      var _this5 = this; // If position data is going to be changed, add the item's size to the\n      // transformer to allow for calculations.\n\n\n      if (this.options.isCentered) {\n        var itemsData = items.map(function (item, i) {\n          var itemSize = Shuffle.getSize(item.element, true);\n\n          var point = _this5._getItemPosition(itemSize);\n\n          return new Rect(point.x, point.y, itemSize.width, itemSize.height, i);\n        });\n        return this.getTransformedPositions(itemsData, this.containerWidth);\n      } // If no transforms are going to happen, simply return an array of the\n      // future points of each item.\n\n\n      return items.map(function (item) {\n        return _this5._getItemPosition(Shuffle.getSize(item.element, true));\n      });\n    }\n    /**\n     * Determine the location of the next item, based on its size.\n     * @param {{width: number, height: number}} itemSize Object with width and height.\n     * @return {Point}\n     * @private\n     */\n\n  }, {\n    key: \"_getItemPosition\",\n    value: function _getItemPosition(itemSize) {\n      return getItemPosition({\n        itemSize: itemSize,\n        positions: this.positions,\n        gridSize: this.colWidth,\n        total: this.cols,\n        threshold: this.options.columnThreshold,\n        buffer: this.options.buffer\n      });\n    }\n    /**\n     * Mutate positions before they're applied.\n     * @param {Rect[]} itemRects Item data objects.\n     * @param {number} containerWidth Width of the containing element.\n     * @return {Point[]}\n     * @protected\n     */\n\n  }, {\n    key: \"getTransformedPositions\",\n    value: function getTransformedPositions(itemRects, containerWidth) {\n      return getCenteredPositions(itemRects, containerWidth);\n    }\n    /**\n     * Hides the elements that don't match our filter.\n     * @param {ShuffleItem[]} collection Collection to shrink.\n     * @private\n     */\n\n  }, {\n    key: \"_shrink\",\n    value: function _shrink() {\n      var _this6 = this;\n\n      var collection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._getConcealedItems();\n      var count = 0;\n      collection.forEach(function (item) {\n        function callback() {\n          item.applyCss(ShuffleItem.Css.HIDDEN.after);\n        } // Continuing would add a transitionend event listener to the element, but\n        // that listener would not execute because the transform and opacity would\n        // stay the same.\n        // The callback is executed here because it is not guaranteed to be called\n        // after the transitionend event because the transitionend could be\n        // canceled if another animation starts.\n\n\n        if (item.isHidden) {\n          item.applyCss(ShuffleItem.Css.HIDDEN.before);\n          callback();\n          return;\n        }\n\n        item.scale = ShuffleItem.Scale.HIDDEN;\n        item.isHidden = true;\n\n        var styles = _this6.getStylesForTransition(item, ShuffleItem.Css.HIDDEN.before);\n\n        styles.transitionDelay = _this6._getStaggerAmount(count) + 'ms';\n\n        _this6._queue.push({\n          item: item,\n          styles: styles,\n          callback: callback\n        });\n\n        count += 1;\n      });\n    }\n    /**\n     * Resize handler.\n     * @private\n     */\n\n  }, {\n    key: \"_handleResize\",\n    value: function _handleResize() {\n      // If shuffle is disabled, destroyed, don't do anything\n      if (!this.isEnabled || this.isDestroyed) {\n        return;\n      }\n\n      this.update();\n    }\n    /**\n     * Returns styles which will be applied to the an item for a transition.\n     * @param {ShuffleItem} item Item to get styles for. Should have updated\n     *   scale and point properties.\n     * @param {Object} styleObject Extra styles that will be used in the transition.\n     * @return {!Object} Transforms for transitions, left/top for animate.\n     * @protected\n     */\n\n  }, {\n    key: \"getStylesForTransition\",\n    value: function getStylesForTransition(item, styleObject) {\n      // Clone the object to avoid mutating the original.\n      var styles = Object.assign({}, styleObject);\n\n      if (this.options.useTransforms) {\n        var x = this.options.roundTransforms ? Math.round(item.point.x) : item.point.x;\n        var y = this.options.roundTransforms ? Math.round(item.point.y) : item.point.y;\n        styles.transform = \"translate(\".concat(x, \"px, \").concat(y, \"px) scale(\").concat(item.scale, \")\");\n      } else {\n        styles.left = item.point.x + 'px';\n        styles.top = item.point.y + 'px';\n      }\n\n      return styles;\n    }\n    /**\n     * Listen for the transition end on an element and execute the itemCallback\n     * when it finishes.\n     * @param {Element} element Element to listen on.\n     * @param {function} itemCallback Callback for the item.\n     * @param {function} done Callback to notify `parallel` that this one is done.\n     */\n\n  }, {\n    key: \"_whenTransitionDone\",\n    value: function _whenTransitionDone(element, itemCallback, done) {\n      var id = onTransitionEnd(element, function (evt) {\n        itemCallback();\n        done(null, evt);\n      });\n\n      this._transitions.push(id);\n    }\n    /**\n     * Return a function which will set CSS styles and call the `done` function\n     * when (if) the transition finishes.\n     * @param {Object} opts Transition object.\n     * @return {function} A function to be called with a `done` function.\n     */\n\n  }, {\n    key: \"_getTransitionFunction\",\n    value: function _getTransitionFunction(opts) {\n      var _this7 = this;\n\n      return function (done) {\n        opts.item.applyCss(opts.styles);\n\n        _this7._whenTransitionDone(opts.item.element, opts.callback, done);\n      };\n    }\n    /**\n     * Execute the styles gathered in the style queue. This applies styles to elements,\n     * triggering transitions.\n     * @private\n     */\n\n  }, {\n    key: \"_processQueue\",\n    value: function _processQueue() {\n      if (this.isTransitioning) {\n        this._cancelMovement();\n      }\n\n      var hasSpeed = this.options.speed > 0;\n      var hasQueue = this._queue.length > 0;\n\n      if (hasQueue && hasSpeed && this.isInitialized) {\n        this._startTransitions(this._queue);\n      } else if (hasQueue) {\n        this._styleImmediately(this._queue);\n\n        this._dispatch(Shuffle.EventType.LAYOUT); // A call to layout happened, but none of the newly visible items will\n        // change position or the transition duration is zero, which will not trigger\n        // the transitionend event.\n\n      } else {\n        this._dispatch(Shuffle.EventType.LAYOUT);\n      } // Remove everything in the style queue\n\n\n      this._queue.length = 0;\n    }\n    /**\n     * Wait for each transition to finish, the emit the layout event.\n     * @param {Object[]} transitions Array of transition objects.\n     */\n\n  }, {\n    key: \"_startTransitions\",\n    value: function _startTransitions(transitions) {\n      var _this8 = this; // Set flag that shuffle is currently in motion.\n\n\n      this.isTransitioning = true; // Create an array of functions to be called.\n\n      var callbacks = transitions.map(function (obj) {\n        return _this8._getTransitionFunction(obj);\n      });\n      arrayParallel(callbacks, this._movementFinished.bind(this));\n    }\n  }, {\n    key: \"_cancelMovement\",\n    value: function _cancelMovement() {\n      // Remove the transition end event for each listener.\n      this._transitions.forEach(cancelTransitionEnd); // Reset the array.\n\n\n      this._transitions.length = 0; // Show it's no longer active.\n\n      this.isTransitioning = false;\n    }\n    /**\n     * Apply styles without a transition.\n     * @param {Object[]} objects Array of transition objects.\n     * @private\n     */\n\n  }, {\n    key: \"_styleImmediately\",\n    value: function _styleImmediately(objects) {\n      if (objects.length) {\n        var elements = objects.map(function (obj) {\n          return obj.item.element;\n        });\n\n        Shuffle._skipTransitions(elements, function () {\n          objects.forEach(function (obj) {\n            obj.item.applyCss(obj.styles);\n            obj.callback();\n          });\n        });\n      }\n    }\n  }, {\n    key: \"_movementFinished\",\n    value: function _movementFinished() {\n      this._transitions.length = 0;\n      this.isTransitioning = false;\n\n      this._dispatch(Shuffle.EventType.LAYOUT);\n    }\n    /**\n     * The magic. This is what makes the plugin 'shuffle'\n     * @param {string|string[]|function(Element):boolean} [category] Category to filter by.\n     *     Can be a function, string, or array of strings.\n     * @param {SortOptions} [sortOptions] A sort object which can sort the visible set\n     */\n\n  }, {\n    key: \"filter\",\n    value: function filter(category, sortOptions) {\n      if (!this.isEnabled) {\n        return;\n      }\n\n      if (!category || category && category.length === 0) {\n        category = Shuffle.ALL_ITEMS; // eslint-disable-line no-param-reassign\n      }\n\n      this._filter(category); // Shrink each hidden item\n\n\n      this._shrink(); // How many visible elements?\n\n\n      this._updateItemCount(); // Update transforms on visible elements so they will animate to their new positions.\n\n\n      this.sort(sortOptions);\n    }\n    /**\n     * Gets the visible elements, sorts them, and passes them to layout.\n     * @param {SortOptions} [sortOptions] The options object to pass to `sorter`.\n     */\n\n  }, {\n    key: \"sort\",\n    value: function sort() {\n      var sortOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.lastSort;\n\n      if (!this.isEnabled) {\n        return;\n      }\n\n      this._resetCols();\n\n      var items = sorter(this._getFilteredItems(), sortOptions);\n\n      this._layout(items); // `_layout` always happens after `_shrink`, so it's safe to process the style\n      // queue here with styles from the shrink method.\n\n\n      this._processQueue(); // Adjust the height of the container.\n\n\n      this._setContainerSize();\n\n      this.lastSort = sortOptions;\n    }\n    /**\n     * Reposition everything.\n     * @param {boolean} [isOnlyLayout=false] If true, column and gutter widths won't be recalculated.\n     */\n\n  }, {\n    key: \"update\",\n    value: function update() {\n      var isOnlyLayout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (this.isEnabled) {\n        if (!isOnlyLayout) {\n          // Get updated colCount\n          this._setColumns();\n        } // Layout items\n\n\n        this.sort();\n      }\n    }\n    /**\n     * Use this instead of `update()` if you don't need the columns and gutters updated\n     * Maybe an image inside `shuffle` loaded (and now has a height), which means calculations\n     * could be off.\n     */\n\n  }, {\n    key: \"layout\",\n    value: function layout() {\n      this.update(true);\n    }\n    /**\n     * New items have been appended to shuffle. Mix them in with the current\n     * filter or sort status.\n     * @param {Element[]} newItems Collection of new items.\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(newItems) {\n      var _this9 = this;\n\n      var items = arrayUnique(newItems).map(function (el) {\n        return new ShuffleItem(el);\n      }); // Add classes and set initial positions.\n\n      this._initItems(items); // Determine which items will go with the current filter.\n\n\n      this._resetCols();\n\n      var allItems = this._mergeNewItems(items);\n\n      var sortedItems = sorter(allItems, this.lastSort);\n\n      var allSortedItemsSet = this._filter(this.lastFilter, sortedItems);\n\n      var isNewItem = function isNewItem(item) {\n        return items.includes(item);\n      };\n\n      var applyHiddenState = function applyHiddenState(item) {\n        item.scale = ShuffleItem.Scale.HIDDEN;\n        item.isHidden = true;\n        item.applyCss(ShuffleItem.Css.HIDDEN.before);\n        item.applyCss(ShuffleItem.Css.HIDDEN.after);\n      }; // Layout all items again so that new items get positions.\n      // Synchonously apply positions.\n\n\n      var itemPositions = this._getNextPositions(allSortedItemsSet.visible);\n\n      allSortedItemsSet.visible.forEach(function (item, i) {\n        if (isNewItem(item)) {\n          item.point = itemPositions[i];\n          applyHiddenState(item);\n          item.applyCss(_this9.getStylesForTransition(item, {}));\n        }\n      });\n      allSortedItemsSet.hidden.forEach(function (item) {\n        if (isNewItem(item)) {\n          applyHiddenState(item);\n        }\n      }); // Cause layout so that the styles above are applied.\n\n      this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n      // Add transition to each item.\n\n      this.setItemTransitions(items); // Update the list of items.\n\n      this.items = this._mergeNewItems(items); // Update layout/visibility of new and old items.\n\n      this.filter(this.lastFilter);\n    }\n    /**\n     * Disables shuffle from updating dimensions and layout on resize\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.isEnabled = false;\n    }\n    /**\n     * Enables shuffle again\n     * @param {boolean} [isUpdateLayout=true] if undefined, shuffle will update columns and gutters\n     */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      var isUpdateLayout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.isEnabled = true;\n\n      if (isUpdateLayout) {\n        this.update();\n      }\n    }\n    /**\n     * Remove 1 or more shuffle items.\n     * @param {Element[]} elements An array containing one or more\n     *     elements in shuffle\n     * @return {Shuffle} The shuffle instance.\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(elements) {\n      var _this10 = this;\n\n      if (!elements.length) {\n        return;\n      }\n\n      var collection = arrayUnique(elements);\n      var oldItems = collection.map(function (element) {\n        return _this10.getItemByElement(element);\n      }).filter(function (item) {\n        return !!item;\n      });\n\n      var handleLayout = function handleLayout() {\n        _this10._disposeItems(oldItems); // Remove the collection in the callback\n\n\n        collection.forEach(function (element) {\n          element.parentNode.removeChild(element);\n        });\n\n        _this10._dispatch(Shuffle.EventType.REMOVED, {\n          collection: collection\n        });\n      }; // Hide collection first.\n\n\n      this._toggleFilterClasses({\n        visible: [],\n        hidden: oldItems\n      });\n\n      this._shrink(oldItems);\n\n      this.sort(); // Update the list of items here because `remove` could be called again\n      // with an item that is in the process of being removed.\n\n      this.items = this.items.filter(function (item) {\n        return !oldItems.includes(item);\n      });\n\n      this._updateItemCount();\n\n      this.once(Shuffle.EventType.LAYOUT, handleLayout);\n    }\n    /**\n     * Retrieve a shuffle item by its element.\n     * @param {Element} element Element to look for.\n     * @return {?ShuffleItem} A shuffle item or undefined if it's not found.\n     */\n\n  }, {\n    key: \"getItemByElement\",\n    value: function getItemByElement(element) {\n      return this.items.find(function (item) {\n        return item.element === element;\n      });\n    }\n    /**\n     * Dump the elements currently stored and reinitialize all child elements which\n     * match the `itemSelector`.\n     */\n\n  }, {\n    key: \"resetItems\",\n    value: function resetItems() {\n      var _this11 = this; // Remove refs to current items.\n\n\n      this._disposeItems(this.items);\n\n      this.isInitialized = false; // Find new items in the DOM.\n\n      this.items = this._getItems(); // Set initial styles on the new items.\n\n      this._initItems(this.items);\n\n      this.once(Shuffle.EventType.LAYOUT, function () {\n        // Add transition to each item.\n        _this11.setItemTransitions(_this11.items);\n\n        _this11.isInitialized = true;\n      }); // Lay out all items.\n\n      this.filter(this.lastFilter);\n    }\n    /**\n     * Destroys shuffle, removes events, styles, and classes\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._cancelMovement();\n\n      window.removeEventListener('resize', this._onResize); // Reset container styles\n\n      this.element.classList.remove('shuffle');\n      this.element.removeAttribute('style'); // Reset individual item styles\n\n      this._disposeItems(this.items);\n\n      this.items.length = 0;\n      this._transitions.length = 0; // Null DOM references\n\n      this.options.sizer = null;\n      this.element = null; // Set a flag so if a debounced resize has been triggered,\n      // it can first check if it is actually isDestroyed and not doing anything\n\n      this.isDestroyed = true;\n      this.isEnabled = false;\n    }\n    /**\n     * Returns the outer width of an element, optionally including its margins.\n     *\n     * There are a few different methods for getting the width of an element, none of\n     * which work perfectly for all Shuffle's use cases.\n     *\n     * 1. getBoundingClientRect() `left` and `right` properties.\n     *   - Accounts for transform scaled elements, making it useless for Shuffle\n     *   elements which have shrunk.\n     * 2. The `offsetWidth` property.\n     *   - This value stays the same regardless of the elements transform property,\n     *   however, it does not return subpixel values.\n     * 3. getComputedStyle()\n     *   - This works great Chrome, Firefox, Safari, but IE<=11 does not include\n     *   padding and border when box-sizing: border-box is set, requiring a feature\n     *   test and extra work to add the padding back for IE and other browsers which\n     *   follow the W3C spec here.\n     *\n     * @param {Element} element The element.\n     * @param {boolean} [includeMargins=false] Whether to include margins.\n     * @return {{width: number, height: number}} The width and height.\n     */\n\n  }], [{\n    key: \"getSize\",\n    value: function getSize(element) {\n      var includeMargins = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false; // Store the styles so that they can be used by others without asking for it again.\n\n      var styles = window.getComputedStyle(element, null);\n      var width = getNumberStyle(element, 'width', styles);\n      var height = getNumberStyle(element, 'height', styles);\n\n      if (includeMargins) {\n        var marginLeft = getNumberStyle(element, 'marginLeft', styles);\n        var marginRight = getNumberStyle(element, 'marginRight', styles);\n        var marginTop = getNumberStyle(element, 'marginTop', styles);\n        var marginBottom = getNumberStyle(element, 'marginBottom', styles);\n        width += marginLeft + marginRight;\n        height += marginTop + marginBottom;\n      }\n\n      return {\n        width: width,\n        height: height\n      };\n    }\n    /**\n     * Change a property or execute a function which will not have a transition\n     * @param {Element[]} elements DOM elements that won't be transitioned.\n     * @param {function} callback A function which will be called while transition\n     *     is set to 0ms.\n     * @private\n     */\n\n  }, {\n    key: \"_skipTransitions\",\n    value: function _skipTransitions(elements, callback) {\n      var zero = '0ms'; // Save current duration and delay.\n\n      var data = elements.map(function (element) {\n        var style = element.style;\n        var duration = style.transitionDuration;\n        var delay = style.transitionDelay; // Set the duration to zero so it happens immediately\n\n        style.transitionDuration = zero;\n        style.transitionDelay = zero;\n        return {\n          duration: duration,\n          delay: delay\n        };\n      });\n      callback(); // Cause forced synchronous layout.\n\n      elements[0].offsetWidth; // eslint-disable-line no-unused-expressions\n      // Put the duration back\n\n      elements.forEach(function (element, i) {\n        element.style.transitionDuration = data[i].duration;\n        element.style.transitionDelay = data[i].delay;\n      });\n    }\n  }]);\n\n  return Shuffle;\n}(tinyEmitter);\n\nShuffle.ShuffleItem = ShuffleItem;\nShuffle.ALL_ITEMS = 'all';\nShuffle.FILTER_ATTRIBUTE_KEY = 'groups';\n/** @enum {string} */\n\nShuffle.EventType = {\n  LAYOUT: 'shuffle:layout',\n  REMOVED: 'shuffle:removed'\n};\n/** @enum {string} */\n\nShuffle.Classes = Classes;\n/** @enum {string} */\n\nShuffle.FilterMode = {\n  ANY: 'any',\n  ALL: 'all'\n}; // Overrideable options\n\nShuffle.options = {\n  // Initial filter group.\n  group: Shuffle.ALL_ITEMS,\n  // Transition/animation speed (milliseconds).\n  speed: 250,\n  // CSS easing function to use.\n  easing: 'cubic-bezier(0.4, 0.0, 0.2, 1)',\n  // e.g. '.picture-item'.\n  itemSelector: '*',\n  // Element or selector string. Use an element to determine the size of columns\n  // and gutters.\n  sizer: null,\n  // A static number or function that tells the plugin how wide the gutters\n  // between columns are (in pixels).\n  gutterWidth: 0,\n  // A static number or function that returns a number which tells the plugin\n  // how wide the columns are (in pixels).\n  columnWidth: 0,\n  // If your group is not json, and is comma delimeted, you could set delimiter\n  // to ','.\n  delimiter: null,\n  // Useful for percentage based heights when they might not always be exactly\n  // the same (in pixels).\n  buffer: 0,\n  // Reading the width of elements isn't precise enough and can cause columns to\n  // jump between values.\n  columnThreshold: 0.01,\n  // Shuffle can be isInitialized with a sort object. It is the same object\n  // given to the sort method.\n  initialSort: null,\n  // By default, shuffle will throttle resize events. This can be changed or\n  // removed.\n  throttle: throttleit,\n  // How often shuffle can be called on resize (in milliseconds).\n  throttleTime: 300,\n  // Transition delay offset for each item in milliseconds.\n  staggerAmount: 15,\n  // Maximum stagger delay in milliseconds.\n  staggerAmountMax: 150,\n  // Whether to use transforms or absolute positioning.\n  useTransforms: true,\n  // Affects using an array with filter. e.g. `filter(['one', 'two'])`. With \"any\",\n  // the element passes the test if any of its groups are in the array. With \"all\",\n  // the element only passes if all groups are in the array.\n  filterMode: Shuffle.FilterMode.ANY,\n  // Attempt to center grid items in each row.\n  isCentered: false,\n  // Whether to round pixel values used in translate(x, y). This usually avoids\n  // blurriness.\n  roundTransforms: true\n};\nShuffle.Point = Point;\nShuffle.Rect = Rect; // Expose for testing. Hack at your own risk.\n\nShuffle.__sorter = sorter;\nShuffle.__getColumnSpan = getColumnSpan;\nShuffle.__getAvailablePositions = getAvailablePositions;\nShuffle.__getShortColumn = getShortColumn;\nShuffle.__getCenteredPositions = getCenteredPositions;\nexport default Shuffle;","map":{"version":3,"sources":["../node_modules/tiny-emitter/index.js","../node_modules/matches-selector/index.js","../node_modules/throttleit/index.js","../node_modules/array-parallel/index.js","../src/get-number.js","../src/point.js","../src/rect.js","../src/classes.js","../src/shuffle-item.js","../src/computed-size.js","../src/get-number-style.js","../src/sorter.js","../src/on-transition-end.js","../src/array-max.js","../src/array-min.js","../src/layout.js","../src/hyphenate.js","../src/shuffle.js"],"names":["parseFloat","Point","getNumber","a","b","Rect","BASE","SHUFFLE_ITEM","VISIBLE","HIDDEN","id","ShuffleItem","Classes","classes","obj","Object","INITIAL","position","top","left","visibility","willChange","before","opacity","after","transitionDelay","value","element","document","e","window","styles","testComputedSize","style","n","array","i","Math","temp","defaults","reverse","by","compare","randomize","key","opts","original","Array","revert","arr","valA","valB","transitions","eventName","count","uniqueId","listener","evt","cancelTransitionEnd","callback","columnSpan","itemWidth","available","columns","arrayMax","positions","minPosition","arrayMin","len","itemSize","gridSize","total","threshold","buffer","span","getColumnSpan","setY","getAvailablePositions","shortColumnIndex","getShortColumn","point","setHeight","rowMap","itemRects","itemRect","rects","rows","centeredRows","lastItem","end","offset","containerWidth","finalRects","canMove","newRects","newRect","r","noOverlap","hasOverlap","intersects","intersectingRect","rowIndex","items","m1","Shuffle","TinyEmitter","options","el","layout","containerCss","resizeFunction","option","category","lastFilter","collection","set","visible","hidden","item","attr","keys","JSON","speed","easing","positionProps","cssProps","hyphenate","properties","matches","children","sorter","gutterSize","size","getNumberStyle","width","gutter","columnWidth","calculatedColumns","index","name","data","itemPositions","itemsData","getItemPosition","getCenteredPositions","styleObject","x","y","itemCallback","done","onTransitionEnd","hasSpeed","hasQueue","callbacks","parallel","objects","elements","sortOptions","lastSort","isOnlyLayout","newItems","allItems","sortedItems","allSortedItemsSet","isNewItem","applyHiddenState","isUpdateLayout","arrayUnique","oldItems","handleLayout","includeMargins","height","marginLeft","marginRight","marginTop","marginBottom","zero","duration","delay","LAYOUT","REMOVED","ANY","ALL","group","itemSelector","sizer","gutterWidth","delimiter","columnThreshold","initialSort","throttle","throttleTime","staggerAmount","staggerAmountMax","useTransforms","filterMode","isCentered","roundTransforms"],"mappings":"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","sourcesContent":["function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\nmodule.exports.TinyEmitter = E;\n","'use strict';\n\nvar proto = typeof Element !== 'undefined' ? Element.prototype : {};\nvar vendor = proto.matches\n  || proto.matchesSelector\n  || proto.webkitMatchesSelector\n  || proto.mozMatchesSelector\n  || proto.msMatchesSelector\n  || proto.oMatchesSelector;\n\nmodule.exports = match;\n\n/**\n * Match `el` to `selector`.\n *\n * @param {Element} el\n * @param {String} selector\n * @return {Boolean}\n * @api public\n */\n\nfunction match(el, selector) {\n  if (!el || el.nodeType !== 1) return false;\n  if (vendor) return vendor.call(el, selector);\n  var nodes = el.parentNode.querySelectorAll(selector);\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] == el) return true;\n  }\n  return false;\n}\n","module.exports = throttle;\n\n/**\n * Returns a new function that, when invoked, invokes `func` at most once per `wait` milliseconds.\n *\n * @param {Function} func Function to wrap.\n * @param {Number} wait Number of milliseconds that must elapse between `func` invocations.\n * @return {Function} A new function that wraps the `func` function passed in.\n */\n\nfunction throttle (func, wait) {\n  var ctx, args, rtn, timeoutID; // caching\n  var last = 0;\n\n  return function throttled () {\n    ctx = this;\n    args = arguments;\n    var delta = new Date() - last;\n    if (!timeoutID)\n      if (delta >= wait) call();\n      else timeoutID = setTimeout(call, wait - delta);\n    return rtn;\n  };\n\n  function call () {\n    timeoutID = 0;\n    last = +new Date();\n    rtn = func.apply(ctx, args);\n    ctx = null;\n    args = null;\n  }\n}\n","module.exports = function parallel(fns, context, callback) {\n  if (!callback) {\n    if (typeof context === 'function') {\n      callback = context\n      context = null\n    } else {\n      callback = noop\n    }\n  }\n\n  var pending = fns && fns.length\n  if (!pending) return callback(null, []);\n\n  var finished = false\n  var results = new Array(pending)\n\n  fns.forEach(context ? function (fn, i) {\n    fn.call(context, maybeDone(i))\n  } : function (fn, i) {\n    fn(maybeDone(i))\n  })\n\n  function maybeDone(i) {\n    return function (err, result) {\n      if (finished) return;\n\n      if (err) {\n        callback(err, results)\n        finished = true\n        return\n      }\n\n      results[i] = result\n\n      if (!--pending) callback(null, results);\n    }\n  }\n}\n\nfunction noop() {}\n","/**\n * Always returns a numeric value, given a value. Logic from jQuery's `isNumeric`.\n * @param {*} value Possibly numeric value.\n * @return {number} `value` or zero if `value` isn't numeric.\n */\nexport default function getNumber(value) {\n  return parseFloat(value) || 0;\n}\n","import getNumber from './get-number';\n\nclass Point {\n  /**\n   * Represents a coordinate pair.\n   * @param {number} [x=0] X.\n   * @param {number} [y=0] Y.\n   */\n  constructor(x, y) {\n    this.x = getNumber(x);\n    this.y = getNumber(y);\n  }\n\n  /**\n   * Whether two points are equal.\n   * @param {Point} a Point A.\n   * @param {Point} b Point B.\n   * @return {boolean}\n   */\n  static equals(a, b) {\n    return a.x === b.x && a.y === b.y;\n  }\n}\n\nexport default Point;\n","export default class Rect {\n  /**\n   * Class for representing rectangular regions.\n   * https://github.com/google/closure-library/blob/master/closure/goog/math/rect.js\n   * @param {number} x Left.\n   * @param {number} y Top.\n   * @param {number} w Width.\n   * @param {number} h Height.\n   * @param {number} id Identifier\n   * @constructor\n   */\n  constructor(x, y, w, h, id) {\n    this.id = id;\n\n    /** @type {number} */\n    this.left = x;\n\n    /** @type {number} */\n    this.top = y;\n\n    /** @type {number} */\n    this.width = w;\n\n    /** @type {number} */\n    this.height = h;\n  }\n\n  /**\n   * Returns whether two rectangles intersect.\n   * @param {Rect} a A Rectangle.\n   * @param {Rect} b A Rectangle.\n   * @return {boolean} Whether a and b intersect.\n   */\n  static intersects(a, b) {\n    return (\n      a.left < b.left + b.width && b.left < a.left + a.width\n      && a.top < b.top + b.height && b.top < a.top + a.height);\n  }\n}\n","export default {\n  BASE: 'shuffle',\n  SHUFFLE_ITEM: 'shuffle-item',\n  VISIBLE: 'shuffle-item--visible',\n  HIDDEN: 'shuffle-item--hidden',\n};\n","import Point from './point';\nimport Classes from './classes';\n\nlet id = 0;\n\nclass ShuffleItem {\n  constructor(element) {\n    id += 1;\n    this.id = id;\n    this.element = element;\n\n    /**\n     * Used to separate items for layout and shrink.\n     */\n    this.isVisible = true;\n\n    /**\n     * Used to determine if a transition will happen. By the time the _layout\n     * and _shrink methods get the ShuffleItem instances, the `isVisible` value\n     * has already been changed by the separation methods, so this property is\n     * needed to know if the item was visible/hidden before the shrink/layout.\n     */\n    this.isHidden = false;\n  }\n\n  show() {\n    this.isVisible = true;\n    this.element.classList.remove(Classes.HIDDEN);\n    this.element.classList.add(Classes.VISIBLE);\n    this.element.removeAttribute('aria-hidden');\n  }\n\n  hide() {\n    this.isVisible = false;\n    this.element.classList.remove(Classes.VISIBLE);\n    this.element.classList.add(Classes.HIDDEN);\n    this.element.setAttribute('aria-hidden', true);\n  }\n\n  init() {\n    this.addClasses([Classes.SHUFFLE_ITEM, Classes.VISIBLE]);\n    this.applyCss(ShuffleItem.Css.INITIAL);\n    this.scale = ShuffleItem.Scale.VISIBLE;\n    this.point = new Point();\n  }\n\n  addClasses(classes) {\n    classes.forEach((className) => {\n      this.element.classList.add(className);\n    });\n  }\n\n  removeClasses(classes) {\n    classes.forEach((className) => {\n      this.element.classList.remove(className);\n    });\n  }\n\n  applyCss(obj) {\n    Object.keys(obj).forEach((key) => {\n      this.element.style[key] = obj[key];\n    });\n  }\n\n  dispose() {\n    this.removeClasses([\n      Classes.HIDDEN,\n      Classes.VISIBLE,\n      Classes.SHUFFLE_ITEM,\n    ]);\n\n    this.element.removeAttribute('style');\n    this.element = null;\n  }\n}\n\nShuffleItem.Css = {\n  INITIAL: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    visibility: 'visible',\n    willChange: 'transform',\n  },\n  VISIBLE: {\n    before: {\n      opacity: 1,\n      visibility: 'visible',\n    },\n    after: {\n      transitionDelay: '',\n    },\n  },\n  HIDDEN: {\n    before: {\n      opacity: 0,\n    },\n    after: {\n      visibility: 'hidden',\n      transitionDelay: '',\n    },\n  },\n};\n\nShuffleItem.Scale = {\n  VISIBLE: 1,\n  HIDDEN: 0.001,\n};\n\nexport default ShuffleItem;\n","let value = null;\nexport default () => {\n  if (value !== null) {\n    return value;\n  }\n\n  const element = document.body || document.documentElement;\n  const e = document.createElement('div');\n  e.style.cssText = 'width:10px;padding:2px;box-sizing:border-box;';\n  element.appendChild(e);\n\n  value = window.getComputedStyle(e, null).width === '10px';\n\n  element.removeChild(e);\n\n  return value;\n};\n","import getNumber from './get-number';\nimport testComputedSize from './computed-size';\n\n/**\n * Retrieve the computed style for an element, parsed as a float.\n * @param {Element} element Element to get style for.\n * @param {string} style Style property.\n * @param {CSSStyleDeclaration} [styles] Optionally include clean styles to\n *     use instead of asking for them again.\n * @return {number} The parsed computed value or zero if that fails because IE\n *     will return 'auto' when the element doesn't have margins instead of\n *     the computed style.\n */\nexport default function getNumberStyle(\n  element, style,\n  styles = window.getComputedStyle(element, null),\n) {\n  let value = getNumber(styles[style]);\n\n  // Support IE<=11 and W3C spec.\n  if (!testComputedSize() && style === 'width') {\n    value += getNumber(styles.paddingLeft)\n      + getNumber(styles.paddingRight)\n      + getNumber(styles.borderLeftWidth)\n      + getNumber(styles.borderRightWidth);\n  } else if (!testComputedSize() && style === 'height') {\n    value += getNumber(styles.paddingTop)\n      + getNumber(styles.paddingBottom)\n      + getNumber(styles.borderTopWidth)\n      + getNumber(styles.borderBottomWidth);\n  }\n\n  return value;\n}\n","/**\n * Fisher-Yates shuffle.\n * http://stackoverflow.com/a/962890/373422\n * https://bost.ocks.org/mike/shuffle/\n * @param {Array} array Array to shuffle.\n * @return {Array} Randomly sorted array.\n */\nfunction randomize(array) {\n  let n = array.length;\n\n  while (n) {\n    n -= 1;\n    const i = Math.floor(Math.random() * (n + 1));\n    const temp = array[i];\n    array[i] = array[n];\n    array[n] = temp;\n  }\n\n  return array;\n}\n\nconst defaults = {\n  // Use array.reverse() to reverse the results\n  reverse: false,\n\n  // Sorting function\n  by: null,\n\n  // Custom sort function\n  compare: null,\n\n  // If true, this will skip the sorting and return a randomized order in the array\n  randomize: false,\n\n  // Determines which property of each item in the array is passed to the\n  // sorting method.\n  key: 'element',\n};\n\n/**\n * You can return `undefined` from the `by` function to revert to DOM order.\n * @param {Array<T>} arr Array to sort.\n * @param {SortOptions} options Sorting options.\n * @return {Array<T>}\n */\nexport default function sorter(arr, options) {\n  const opts = Object.assign({}, defaults, options);\n  const original = Array.from(arr);\n  let revert = false;\n\n  if (!arr.length) {\n    return [];\n  }\n\n  if (opts.randomize) {\n    return randomize(arr);\n  }\n\n  // Sort the elements by the opts.by function.\n  // If we don't have opts.by, default to DOM order\n  if (typeof opts.by === 'function') {\n    arr.sort((a, b) => {\n      // Exit early if we already know we want to revert\n      if (revert) {\n        return 0;\n      }\n\n      const valA = opts.by(a[opts.key]);\n      const valB = opts.by(b[opts.key]);\n\n      // If both values are undefined, use the DOM order\n      if (valA === undefined && valB === undefined) {\n        revert = true;\n        return 0;\n      }\n\n      if (valA < valB || valA === 'sortFirst' || valB === 'sortLast') {\n        return -1;\n      }\n\n      if (valA > valB || valA === 'sortLast' || valB === 'sortFirst') {\n        return 1;\n      }\n\n      return 0;\n    });\n  } else if (typeof opts.compare === 'function') {\n    arr.sort(opts.compare);\n  }\n\n  // Revert to the original array if necessary\n  if (revert) {\n    return original;\n  }\n\n  if (opts.reverse) {\n    arr.reverse();\n  }\n\n  return arr;\n}\n","const transitions = {};\nconst eventName = 'transitionend';\nlet count = 0;\n\nfunction uniqueId() {\n  count += 1;\n  return eventName + count;\n}\n\nexport function cancelTransitionEnd(id) {\n  if (transitions[id]) {\n    transitions[id].element.removeEventListener(eventName, transitions[id].listener);\n    transitions[id] = null;\n    return true;\n  }\n\n  return false;\n}\n\nexport function onTransitionEnd(element, callback) {\n  const id = uniqueId();\n  const listener = (evt) => {\n    if (evt.currentTarget === evt.target) {\n      cancelTransitionEnd(id);\n      callback(evt);\n    }\n  };\n\n  element.addEventListener(eventName, listener);\n\n  transitions[id] = { element, listener };\n\n  return id;\n}\n","export default function arrayMax(array) {\n  return Math.max.apply(Math, array); // eslint-disable-line prefer-spread\n}\n","export default function arrayMin(array) {\n  return Math.min.apply(Math, array); // eslint-disable-line prefer-spread\n}\n","import Point from './point';\nimport Rect from './rect';\nimport arrayMax from './array-max';\nimport arrayMin from './array-min';\n\n/**\n * Determine the number of columns an items spans.\n * @param {number} itemWidth Width of the item.\n * @param {number} columnWidth Width of the column (includes gutter).\n * @param {number} columns Total number of columns\n * @param {number} threshold A buffer value for the size of the column to fit.\n * @return {number}\n */\nexport function getColumnSpan(itemWidth, columnWidth, columns, threshold) {\n  let columnSpan = itemWidth / columnWidth;\n\n  // If the difference between the rounded column span number and the\n  // calculated column span number is really small, round the number to\n  // make it fit.\n  if (Math.abs(Math.round(columnSpan) - columnSpan) < threshold) {\n    // e.g. columnSpan = 4.0089945390298745\n    columnSpan = Math.round(columnSpan);\n  }\n\n  // Ensure the column span is not more than the amount of columns in the whole layout.\n  return Math.min(Math.ceil(columnSpan), columns);\n}\n\n/**\n * Retrieves the column set to use for placement.\n * @param {number} columnSpan The number of columns this current item spans.\n * @param {number} columns The total columns in the grid.\n * @return {Array.<number>} An array of numbers represeting the column set.\n */\nexport function getAvailablePositions(positions, columnSpan, columns) {\n  // The item spans only one column.\n  if (columnSpan === 1) {\n    return positions;\n  }\n\n  // The item spans more than one column, figure out how many different\n  // places it could fit horizontally.\n  // The group count is the number of places within the positions this block\n  // could fit, ignoring the current positions of items.\n  // Imagine a 2 column brick as the second item in a 4 column grid with\n  // 10px height each. Find the places it would fit:\n  // [20, 10, 10, 0]\n  //  |   |   |\n  //  *   *   *\n  //\n  // Then take the places which fit and get the bigger of the two:\n  // max([20, 10]), max([10, 10]), max([10, 0]) = [20, 10, 10]\n  //\n  // Next, find the first smallest number (the short column).\n  // [20, 10, 10]\n  //      |\n  //      *\n  //\n  // And that's where it should be placed!\n  //\n  // Another example where the second column's item extends past the first:\n  // [10, 20, 10, 0] => [20, 20, 10] => 10\n  const available = [];\n\n  // For how many possible positions for this item there are.\n  for (let i = 0; i <= columns - columnSpan; i++) {\n    // Find the bigger value for each place it could fit.\n    available.push(arrayMax(positions.slice(i, i + columnSpan)));\n  }\n\n  return available;\n}\n\n/**\n * Find index of short column, the first from the left where this item will go.\n *\n * @param {Array.<number>} positions The array to search for the smallest number.\n * @param {number} buffer Optional buffer which is very useful when the height\n *     is a percentage of the width.\n * @return {number} Index of the short column.\n */\nexport function getShortColumn(positions, buffer) {\n  const minPosition = arrayMin(positions);\n  for (let i = 0, len = positions.length; i < len; i++) {\n    if (positions[i] >= minPosition - buffer && positions[i] <= minPosition + buffer) {\n      return i;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * Determine the location of the next item, based on its size.\n * @param {Object} itemSize Object with width and height.\n * @param {Array.<number>} positions Positions of the other current items.\n * @param {number} gridSize The column width or row height.\n * @param {number} total The total number of columns or rows.\n * @param {number} threshold Buffer value for the column to fit.\n * @param {number} buffer Vertical buffer for the height of items.\n * @return {Point}\n */\nexport function getItemPosition({\n  itemSize, positions, gridSize, total, threshold, buffer,\n}) {\n  const span = getColumnSpan(itemSize.width, gridSize, total, threshold);\n  const setY = getAvailablePositions(positions, span, total);\n  const shortColumnIndex = getShortColumn(setY, buffer);\n\n  // Position the item\n  const point = new Point(gridSize * shortColumnIndex, setY[shortColumnIndex]);\n\n  // Update the columns array with the new values for each column.\n  // e.g. before the update the columns could be [250, 0, 0, 0] for an item\n  // which spans 2 columns. After it would be [250, itemHeight, itemHeight, 0].\n  const setHeight = setY[shortColumnIndex] + itemSize.height;\n  for (let i = 0; i < span; i++) {\n    positions[shortColumnIndex + i] = setHeight;\n  }\n\n  return point;\n}\n\n/**\n * This method attempts to center items. This method could potentially be slow\n * with a large number of items because it must place items, then check every\n * previous item to ensure there is no overlap.\n * @param {Array.<Rect>} itemRects Item data objects.\n * @param {number} containerWidth Width of the containing element.\n * @return {Array.<Point>}\n */\nexport function getCenteredPositions(itemRects, containerWidth) {\n  const rowMap = {};\n\n  // Populate rows by their offset because items could jump between rows like:\n  // a   c\n  //  bbb\n  itemRects.forEach((itemRect) => {\n    if (rowMap[itemRect.top]) {\n      // Push the point to the last row array.\n      rowMap[itemRect.top].push(itemRect);\n    } else {\n      // Start of a new row.\n      rowMap[itemRect.top] = [itemRect];\n    }\n  });\n\n  // For each row, find the end of the last item, then calculate\n  // the remaining space by dividing it by 2. Then add that\n  // offset to the x position of each point.\n  let rects = [];\n  const rows = [];\n  const centeredRows = [];\n  Object.keys(rowMap).forEach((key) => {\n    const itemRects = rowMap[key];\n    rows.push(itemRects);\n    const lastItem = itemRects[itemRects.length - 1];\n    const end = lastItem.left + lastItem.width;\n    const offset = Math.round((containerWidth - end) / 2);\n\n    let finalRects = itemRects;\n    let canMove = false;\n    if (offset > 0) {\n      const newRects = [];\n      canMove = itemRects.every((r) => {\n        const newRect = new Rect(r.left + offset, r.top, r.width, r.height, r.id);\n\n        // Check all current rects to make sure none overlap.\n        const noOverlap = !rects.some(r => Rect.intersects(newRect, r));\n\n        newRects.push(newRect);\n        return noOverlap;\n      });\n\n      // If none of the rectangles overlapped, the whole group can be centered.\n      if (canMove) {\n        finalRects = newRects;\n      }\n    }\n\n    // If the items are not going to be offset, ensure that the original\n    // placement for this row will not overlap previous rows (row-spanning\n    // elements could be in the way).\n    if (!canMove) {\n      let intersectingRect;\n      const hasOverlap = itemRects.some(itemRect => rects.some((r) => {\n        const intersects = Rect.intersects(itemRect, r);\n        if (intersects) {\n          intersectingRect = r;\n        }\n        return intersects;\n      }));\n\n      // If there is any overlap, replace the overlapping row with the original.\n      if (hasOverlap) {\n        const rowIndex = centeredRows.findIndex(items => items.includes(intersectingRect));\n        centeredRows.splice(rowIndex, 1, rows[rowIndex]);\n      }\n    }\n\n    rects = rects.concat(finalRects);\n    centeredRows.push(finalRects);\n  });\n\n  // Reduce array of arrays to a single array of points.\n  // https://stackoverflow.com/a/10865042/373422\n  // Then reset sort back to how the items were passed to this method.\n  // Remove the wrapper object with index, map to a Point.\n  return [].concat.apply([], centeredRows) // eslint-disable-line prefer-spread\n    .sort((a, b) => (a.id - b.id))\n    .map(itemRect => new Point(itemRect.left, itemRect.top));\n}\n","/**\n * Hyphenates a javascript style string to a css one. For example:\n * MozBoxSizing -> -moz-box-sizing.\n * @param {string} str The string to hyphenate.\n * @return {string} The hyphenated string.\n */\nexport default function hyphenate(str) {\n  return str.replace(/([A-Z])/g, (str, m1) => `-${m1.toLowerCase()}`);\n}\n","import TinyEmitter from 'tiny-emitter';\nimport matches from 'matches-selector';\nimport throttle from 'throttleit';\nimport parallel from 'array-parallel';\n\nimport Point from './point';\nimport Rect from './rect';\nimport ShuffleItem from './shuffle-item';\nimport Classes from './classes';\nimport getNumberStyle from './get-number-style';\nimport sorter from './sorter';\nimport { onTransitionEnd, cancelTransitionEnd } from './on-transition-end';\nimport {\n  getItemPosition,\n  getColumnSpan,\n  getAvailablePositions,\n  getShortColumn,\n  getCenteredPositions,\n} from './layout';\nimport arrayMax from './array-max';\nimport hyphenate from './hyphenate';\n\nfunction arrayUnique(x) {\n  return Array.from(new Set(x));\n}\n\n// Used for unique instance variables\nlet id = 0;\n\nclass Shuffle extends TinyEmitter {\n  /**\n   * Categorize, sort, and filter a responsive grid of items.\n   *\n   * @param {Element} element An element which is the parent container for the grid items.\n   * @param {Object} [options=Shuffle.options] Options object.\n   * @constructor\n   */\n  constructor(element, options = {}) {\n    super();\n    this.options = Object.assign({}, Shuffle.options, options);\n\n    // Allow misspelling of delimiter since that's how it used to be.\n    // Remove in v6.\n    if (this.options.delimeter) {\n      this.options.delimiter = this.options.delimeter;\n    }\n\n    this.lastSort = {};\n    this.group = Shuffle.ALL_ITEMS;\n    this.lastFilter = Shuffle.ALL_ITEMS;\n    this.isEnabled = true;\n    this.isDestroyed = false;\n    this.isInitialized = false;\n    this._transitions = [];\n    this.isTransitioning = false;\n    this._queue = [];\n\n    const el = this._getElementOption(element);\n\n    if (!el) {\n      throw new TypeError('Shuffle needs to be initialized with an element.');\n    }\n\n    this.element = el;\n    this.id = 'shuffle_' + id;\n    id += 1;\n\n    this._init();\n    this.isInitialized = true;\n  }\n\n  _init() {\n    this.items = this._getItems();\n\n    this.options.sizer = this._getElementOption(this.options.sizer);\n\n    // Add class and invalidate styles\n    this.element.classList.add(Shuffle.Classes.BASE);\n\n    // Set initial css for each item\n    this._initItems(this.items);\n\n    // Bind resize events\n    this._onResize = this._getResizeFunction();\n    window.addEventListener('resize', this._onResize);\n\n    // If the page has not already emitted the `load` event, call layout on load.\n    // This avoids layout issues caused by images and fonts loading after the\n    // instance has been initialized.\n    if (document.readyState !== 'complete') {\n      const layout = this.layout.bind(this);\n      window.addEventListener('load', function onLoad() {\n        window.removeEventListener('load', onLoad);\n        layout();\n      });\n    }\n\n    // Get container css all in one request. Causes reflow\n    const containerCss = window.getComputedStyle(this.element, null);\n    const containerWidth = Shuffle.getSize(this.element).width;\n\n    // Add styles to the container if it doesn't have them.\n    this._validateStyles(containerCss);\n\n    // We already got the container's width above, no need to cause another\n    // reflow getting it again... Calculate the number of columns there will be\n    this._setColumns(containerWidth);\n\n    // Kick off!\n    this.filter(this.options.group, this.options.initialSort);\n\n    // The shuffle items haven't had transitions set on them yet so the user\n    // doesn't see the first layout. Set them now that the first layout is done.\n    // First, however, a synchronous layout must be caused for the previous\n    // styles to be applied without transitions.\n    this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n    this.setItemTransitions(this.items);\n    this.element.style.transition = `height ${this.options.speed}ms ${this.options.easing}`;\n  }\n\n  /**\n   * Returns a throttled and proxied function for the resize handler.\n   * @return {function}\n   * @private\n   */\n  _getResizeFunction() {\n    const resizeFunction = this._handleResize.bind(this);\n    return this.options.throttle\n      ? this.options.throttle(resizeFunction, this.options.throttleTime)\n      : resizeFunction;\n  }\n\n  /**\n   * Retrieve an element from an option.\n   * @param {string|jQuery|Element} option The option to check.\n   * @return {?Element} The plain element or null.\n   * @private\n   */\n  _getElementOption(option) {\n    // If column width is a string, treat is as a selector and search for the\n    // sizer element within the outermost container\n    if (typeof option === 'string') {\n      return this.element.querySelector(option);\n    }\n\n    // Check for an element\n    if (option && option.nodeType && option.nodeType === 1) {\n      return option;\n    }\n\n    // Check for jQuery object\n    if (option && option.jquery) {\n      return option[0];\n    }\n\n    return null;\n  }\n\n  /**\n   * Ensures the shuffle container has the css styles it needs applied to it.\n   * @param {Object} styles Key value pairs for position and overflow.\n   * @private\n   */\n  _validateStyles(styles) {\n    // Position cannot be static.\n    if (styles.position === 'static') {\n      this.element.style.position = 'relative';\n    }\n\n    // Overflow has to be hidden.\n    if (styles.overflow !== 'hidden') {\n      this.element.style.overflow = 'hidden';\n    }\n  }\n\n  /**\n   * Filter the elements by a category.\n   * @param {string|string[]|function(Element):boolean} [category] Category to\n   *     filter by. If it's given, the last category will be used to filter the items.\n   * @param {Array} [collection] Optionally filter a collection. Defaults to\n   *     all the items.\n   * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\n   * @private\n   */\n  _filter(category = this.lastFilter, collection = this.items) {\n    const set = this._getFilteredSets(category, collection);\n\n    // Individually add/remove hidden/visible classes\n    this._toggleFilterClasses(set);\n\n    // Save the last filter in case elements are appended.\n    this.lastFilter = category;\n\n    // This is saved mainly because providing a filter function (like searching)\n    // will overwrite the `lastFilter` property every time its called.\n    if (typeof category === 'string') {\n      this.group = category;\n    }\n\n    return set;\n  }\n\n  /**\n   * Returns an object containing the visible and hidden elements.\n   * @param {string|string[]|function(Element):boolean} category Category or function to filter by.\n   * @param {ShuffleItem[]} items A collection of items to filter.\n   * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\n   * @private\n   */\n  _getFilteredSets(category, items) {\n    let visible = [];\n    const hidden = [];\n\n    // category === 'all', add visible class to everything\n    if (category === Shuffle.ALL_ITEMS) {\n      visible = items;\n\n    // Loop through each item and use provided function to determine\n    // whether to hide it or not.\n    } else {\n      items.forEach((item) => {\n        if (this._doesPassFilter(category, item.element)) {\n          visible.push(item);\n        } else {\n          hidden.push(item);\n        }\n      });\n    }\n\n    return {\n      visible,\n      hidden,\n    };\n  }\n\n  /**\n   * Test an item to see if it passes a category.\n   * @param {string|string[]|function():boolean} category Category or function to filter by.\n   * @param {Element} element An element to test.\n   * @return {boolean} Whether it passes the category/filter.\n   * @private\n   */\n  _doesPassFilter(category, element) {\n    if (typeof category === 'function') {\n      return category.call(element, element, this);\n    }\n\n    // Check each element's data-groups attribute against the given category.\n    const attr = element.getAttribute('data-' + Shuffle.FILTER_ATTRIBUTE_KEY);\n    const keys = this.options.delimiter\n      ? attr.split(this.options.delimiter)\n      : JSON.parse(attr);\n\n    function testCategory(category) {\n      return keys.includes(category);\n    }\n\n    if (Array.isArray(category)) {\n      if (this.options.filterMode === Shuffle.FilterMode.ANY) {\n        return category.some(testCategory);\n      }\n      return category.every(testCategory);\n    }\n\n    return keys.includes(category);\n  }\n\n  /**\n   * Toggles the visible and hidden class names.\n   * @param {{visible, hidden}} Object with visible and hidden arrays.\n   * @private\n   */\n  _toggleFilterClasses({ visible, hidden }) {\n    visible.forEach((item) => {\n      item.show();\n    });\n\n    hidden.forEach((item) => {\n      item.hide();\n    });\n  }\n\n  /**\n   * Set the initial css for each item\n   * @param {ShuffleItem[]} items Set to initialize.\n   * @private\n   */\n  _initItems(items) {\n    items.forEach((item) => {\n      item.init();\n    });\n  }\n\n  /**\n   * Remove element reference and styles.\n   * @param {ShuffleItem[]} items Set to dispose.\n   * @private\n   */\n  _disposeItems(items) {\n    items.forEach((item) => {\n      item.dispose();\n    });\n  }\n\n  /**\n   * Updates the visible item count.\n   * @private\n   */\n  _updateItemCount() {\n    this.visibleItems = this._getFilteredItems().length;\n  }\n\n  /**\n   * Sets css transform transition on a group of elements. This is not executed\n   * at the same time as `item.init` so that transitions don't occur upon\n   * initialization of a new Shuffle instance.\n   * @param {ShuffleItem[]} items Shuffle items to set transitions on.\n   * @protected\n   */\n  setItemTransitions(items) {\n    const { speed, easing } = this.options;\n    const positionProps = this.options.useTransforms ? ['transform'] : ['top', 'left'];\n\n    // Allow users to transtion other properties if they exist in the `before`\n    // css mapping of the shuffle item.\n    const cssProps = Object.keys(ShuffleItem.Css.HIDDEN.before).map(k => hyphenate(k));\n    const properties = positionProps.concat(cssProps).join();\n\n    items.forEach((item) => {\n      item.element.style.transitionDuration = speed + 'ms';\n      item.element.style.transitionTimingFunction = easing;\n      item.element.style.transitionProperty = properties;\n    });\n  }\n\n  _getItems() {\n    return Array.from(this.element.children)\n      .filter(el => matches(el, this.options.itemSelector))\n      .map(el => new ShuffleItem(el));\n  }\n\n  /**\n   * Combine the current items array with a new one and sort it by DOM order.\n   * @param {ShuffleItem[]} items Items to track.\n   * @return {ShuffleItem[]}\n   */\n  _mergeNewItems(items) {\n    const children = Array.from(this.element.children);\n    return sorter(this.items.concat(items), {\n      by(element) {\n        return children.indexOf(element);\n      },\n    });\n  }\n\n  _getFilteredItems() {\n    return this.items.filter(item => item.isVisible);\n  }\n\n  _getConcealedItems() {\n    return this.items.filter(item => !item.isVisible);\n  }\n\n  /**\n   * Returns the column size, based on column width and sizer options.\n   * @param {number} containerWidth Size of the parent container.\n   * @param {number} gutterSize Size of the gutters.\n   * @return {number}\n   * @private\n   */\n  _getColumnSize(containerWidth, gutterSize) {\n    let size;\n\n    // If the columnWidth property is a function, then the grid is fluid\n    if (typeof this.options.columnWidth === 'function') {\n      size = this.options.columnWidth(containerWidth);\n\n    // columnWidth option isn't a function, are they using a sizing element?\n    } else if (this.options.sizer) {\n      size = Shuffle.getSize(this.options.sizer).width;\n\n    // if not, how about the explicitly set option?\n    } else if (this.options.columnWidth) {\n      size = this.options.columnWidth;\n\n    // or use the size of the first item\n    } else if (this.items.length > 0) {\n      size = Shuffle.getSize(this.items[0].element, true).width;\n\n    // if there's no items, use size of container\n    } else {\n      size = containerWidth;\n    }\n\n    // Don't let them set a column width of zero.\n    if (size === 0) {\n      size = containerWidth;\n    }\n\n    return size + gutterSize;\n  }\n\n  /**\n   * Returns the gutter size, based on gutter width and sizer options.\n   * @param {number} containerWidth Size of the parent container.\n   * @return {number}\n   * @private\n   */\n  _getGutterSize(containerWidth) {\n    let size;\n    if (typeof this.options.gutterWidth === 'function') {\n      size = this.options.gutterWidth(containerWidth);\n    } else if (this.options.sizer) {\n      size = getNumberStyle(this.options.sizer, 'marginLeft');\n    } else {\n      size = this.options.gutterWidth;\n    }\n\n    return size;\n  }\n\n  /**\n   * Calculate the number of columns to be used. Gets css if using sizer element.\n   * @param {number} [containerWidth] Optionally specify a container width if\n   *    it's already available.\n   */\n  _setColumns(containerWidth = Shuffle.getSize(this.element).width) {\n    const gutter = this._getGutterSize(containerWidth);\n    const columnWidth = this._getColumnSize(containerWidth, gutter);\n    let calculatedColumns = (containerWidth + gutter) / columnWidth;\n\n    // Widths given from getStyles are not precise enough...\n    if (Math.abs(Math.round(calculatedColumns) - calculatedColumns)\n        < this.options.columnThreshold) {\n      // e.g. calculatedColumns = 11.998876\n      calculatedColumns = Math.round(calculatedColumns);\n    }\n\n    this.cols = Math.max(Math.floor(calculatedColumns || 0), 1);\n    this.containerWidth = containerWidth;\n    this.colWidth = columnWidth;\n  }\n\n  /**\n   * Adjust the height of the grid\n   */\n  _setContainerSize() {\n    this.element.style.height = this._getContainerSize() + 'px';\n  }\n\n  /**\n   * Based on the column heights, it returns the biggest one.\n   * @return {number}\n   * @private\n   */\n  _getContainerSize() {\n    return arrayMax(this.positions);\n  }\n\n  /**\n   * Get the clamped stagger amount.\n   * @param {number} index Index of the item to be staggered.\n   * @return {number}\n   */\n  _getStaggerAmount(index) {\n    return Math.min(index * this.options.staggerAmount, this.options.staggerAmountMax);\n  }\n\n  /**\n   * Emit an event from this instance.\n   * @param {string} name Event name.\n   * @param {Object} [data={}] Optional object data.\n   */\n  _dispatch(name, data = {}) {\n    if (this.isDestroyed) {\n      return;\n    }\n\n    data.shuffle = this;\n    this.emit(name, data);\n  }\n\n  /**\n   * Zeros out the y columns array, which is used to determine item placement.\n   * @private\n   */\n  _resetCols() {\n    let i = this.cols;\n    this.positions = [];\n    while (i) {\n      i -= 1;\n      this.positions.push(0);\n    }\n  }\n\n  /**\n   * Loops through each item that should be shown and calculates the x, y position.\n   * @param {ShuffleItem[]} items Array of items that will be shown/layed\n   *     out in order in their array.\n   */\n  _layout(items) {\n    const itemPositions = this._getNextPositions(items);\n\n    let count = 0;\n    items.forEach((item, i) => {\n      function callback() {\n        item.applyCss(ShuffleItem.Css.VISIBLE.after);\n      }\n\n      // If the item will not change its position, do not add it to the render\n      // queue. Transitions don't fire when setting a property to the same value.\n      if (Point.equals(item.point, itemPositions[i]) && !item.isHidden) {\n        item.applyCss(ShuffleItem.Css.VISIBLE.before);\n        callback();\n        return;\n      }\n\n      item.point = itemPositions[i];\n      item.scale = ShuffleItem.Scale.VISIBLE;\n      item.isHidden = false;\n\n      // Clone the object so that the `before` object isn't modified when the\n      // transition delay is added.\n      const styles = this.getStylesForTransition(item, ShuffleItem.Css.VISIBLE.before);\n      styles.transitionDelay = this._getStaggerAmount(count) + 'ms';\n\n      this._queue.push({\n        item,\n        styles,\n        callback,\n      });\n\n      count += 1;\n    });\n  }\n\n  /**\n   * Return an array of Point instances representing the future positions of\n   * each item.\n   * @param {ShuffleItem[]} items Array of sorted shuffle items.\n   * @return {Point[]}\n   * @private\n   */\n  _getNextPositions(items) {\n    // If position data is going to be changed, add the item's size to the\n    // transformer to allow for calculations.\n    if (this.options.isCentered) {\n      const itemsData = items.map((item, i) => {\n        const itemSize = Shuffle.getSize(item.element, true);\n        const point = this._getItemPosition(itemSize);\n        return new Rect(point.x, point.y, itemSize.width, itemSize.height, i);\n      });\n\n      return this.getTransformedPositions(itemsData, this.containerWidth);\n    }\n\n    // If no transforms are going to happen, simply return an array of the\n    // future points of each item.\n    return items.map(item => this._getItemPosition(Shuffle.getSize(item.element, true)));\n  }\n\n  /**\n   * Determine the location of the next item, based on its size.\n   * @param {{width: number, height: number}} itemSize Object with width and height.\n   * @return {Point}\n   * @private\n   */\n  _getItemPosition(itemSize) {\n    return getItemPosition({\n      itemSize,\n      positions: this.positions,\n      gridSize: this.colWidth,\n      total: this.cols,\n      threshold: this.options.columnThreshold,\n      buffer: this.options.buffer,\n    });\n  }\n\n  /**\n   * Mutate positions before they're applied.\n   * @param {Rect[]} itemRects Item data objects.\n   * @param {number} containerWidth Width of the containing element.\n   * @return {Point[]}\n   * @protected\n   */\n  getTransformedPositions(itemRects, containerWidth) {\n    return getCenteredPositions(itemRects, containerWidth);\n  }\n\n  /**\n   * Hides the elements that don't match our filter.\n   * @param {ShuffleItem[]} collection Collection to shrink.\n   * @private\n   */\n  _shrink(collection = this._getConcealedItems()) {\n    let count = 0;\n    collection.forEach((item) => {\n      function callback() {\n        item.applyCss(ShuffleItem.Css.HIDDEN.after);\n      }\n\n      // Continuing would add a transitionend event listener to the element, but\n      // that listener would not execute because the transform and opacity would\n      // stay the same.\n      // The callback is executed here because it is not guaranteed to be called\n      // after the transitionend event because the transitionend could be\n      // canceled if another animation starts.\n      if (item.isHidden) {\n        item.applyCss(ShuffleItem.Css.HIDDEN.before);\n        callback();\n        return;\n      }\n\n      item.scale = ShuffleItem.Scale.HIDDEN;\n      item.isHidden = true;\n\n      const styles = this.getStylesForTransition(item, ShuffleItem.Css.HIDDEN.before);\n      styles.transitionDelay = this._getStaggerAmount(count) + 'ms';\n\n      this._queue.push({\n        item,\n        styles,\n        callback,\n      });\n\n      count += 1;\n    });\n  }\n\n  /**\n   * Resize handler.\n   * @private\n   */\n  _handleResize() {\n    // If shuffle is disabled, destroyed, don't do anything\n    if (!this.isEnabled || this.isDestroyed) {\n      return;\n    }\n\n    this.update();\n  }\n\n  /**\n   * Returns styles which will be applied to the an item for a transition.\n   * @param {ShuffleItem} item Item to get styles for. Should have updated\n   *   scale and point properties.\n   * @param {Object} styleObject Extra styles that will be used in the transition.\n   * @return {!Object} Transforms for transitions, left/top for animate.\n   * @protected\n   */\n  getStylesForTransition(item, styleObject) {\n    // Clone the object to avoid mutating the original.\n    const styles = Object.assign({}, styleObject);\n\n    if (this.options.useTransforms) {\n      const x = this.options.roundTransforms ? Math.round(item.point.x) : item.point.x;\n      const y = this.options.roundTransforms ? Math.round(item.point.y) : item.point.y;\n      styles.transform = `translate(${x}px, ${y}px) scale(${item.scale})`;\n    } else {\n      styles.left = item.point.x + 'px';\n      styles.top = item.point.y + 'px';\n    }\n\n    return styles;\n  }\n\n  /**\n   * Listen for the transition end on an element and execute the itemCallback\n   * when it finishes.\n   * @param {Element} element Element to listen on.\n   * @param {function} itemCallback Callback for the item.\n   * @param {function} done Callback to notify `parallel` that this one is done.\n   */\n  _whenTransitionDone(element, itemCallback, done) {\n    const id = onTransitionEnd(element, (evt) => {\n      itemCallback();\n      done(null, evt);\n    });\n\n    this._transitions.push(id);\n  }\n\n  /**\n   * Return a function which will set CSS styles and call the `done` function\n   * when (if) the transition finishes.\n   * @param {Object} opts Transition object.\n   * @return {function} A function to be called with a `done` function.\n   */\n  _getTransitionFunction(opts) {\n    return (done) => {\n      opts.item.applyCss(opts.styles);\n      this._whenTransitionDone(opts.item.element, opts.callback, done);\n    };\n  }\n\n  /**\n   * Execute the styles gathered in the style queue. This applies styles to elements,\n   * triggering transitions.\n   * @private\n   */\n  _processQueue() {\n    if (this.isTransitioning) {\n      this._cancelMovement();\n    }\n\n    const hasSpeed = this.options.speed > 0;\n    const hasQueue = this._queue.length > 0;\n\n    if (hasQueue && hasSpeed && this.isInitialized) {\n      this._startTransitions(this._queue);\n    } else if (hasQueue) {\n      this._styleImmediately(this._queue);\n      this._dispatch(Shuffle.EventType.LAYOUT);\n\n    // A call to layout happened, but none of the newly visible items will\n    // change position or the transition duration is zero, which will not trigger\n    // the transitionend event.\n    } else {\n      this._dispatch(Shuffle.EventType.LAYOUT);\n    }\n\n    // Remove everything in the style queue\n    this._queue.length = 0;\n  }\n\n  /**\n   * Wait for each transition to finish, the emit the layout event.\n   * @param {Object[]} transitions Array of transition objects.\n   */\n  _startTransitions(transitions) {\n    // Set flag that shuffle is currently in motion.\n    this.isTransitioning = true;\n\n    // Create an array of functions to be called.\n    const callbacks = transitions.map(obj => this._getTransitionFunction(obj));\n\n    parallel(callbacks, this._movementFinished.bind(this));\n  }\n\n  _cancelMovement() {\n    // Remove the transition end event for each listener.\n    this._transitions.forEach(cancelTransitionEnd);\n\n    // Reset the array.\n    this._transitions.length = 0;\n\n    // Show it's no longer active.\n    this.isTransitioning = false;\n  }\n\n  /**\n   * Apply styles without a transition.\n   * @param {Object[]} objects Array of transition objects.\n   * @private\n   */\n  _styleImmediately(objects) {\n    if (objects.length) {\n      const elements = objects.map(obj => obj.item.element);\n\n      Shuffle._skipTransitions(elements, () => {\n        objects.forEach((obj) => {\n          obj.item.applyCss(obj.styles);\n          obj.callback();\n        });\n      });\n    }\n  }\n\n  _movementFinished() {\n    this._transitions.length = 0;\n    this.isTransitioning = false;\n    this._dispatch(Shuffle.EventType.LAYOUT);\n  }\n\n  /**\n   * The magic. This is what makes the plugin 'shuffle'\n   * @param {string|string[]|function(Element):boolean} [category] Category to filter by.\n   *     Can be a function, string, or array of strings.\n   * @param {SortOptions} [sortOptions] A sort object which can sort the visible set\n   */\n  filter(category, sortOptions) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    if (!category || (category && category.length === 0)) {\n      category = Shuffle.ALL_ITEMS; // eslint-disable-line no-param-reassign\n    }\n\n    this._filter(category);\n\n    // Shrink each hidden item\n    this._shrink();\n\n    // How many visible elements?\n    this._updateItemCount();\n\n    // Update transforms on visible elements so they will animate to their new positions.\n    this.sort(sortOptions);\n  }\n\n  /**\n   * Gets the visible elements, sorts them, and passes them to layout.\n   * @param {SortOptions} [sortOptions] The options object to pass to `sorter`.\n   */\n  sort(sortOptions = this.lastSort) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    this._resetCols();\n\n    const items = sorter(this._getFilteredItems(), sortOptions);\n\n    this._layout(items);\n\n    // `_layout` always happens after `_shrink`, so it's safe to process the style\n    // queue here with styles from the shrink method.\n    this._processQueue();\n\n    // Adjust the height of the container.\n    this._setContainerSize();\n\n    this.lastSort = sortOptions;\n  }\n\n  /**\n   * Reposition everything.\n   * @param {boolean} [isOnlyLayout=false] If true, column and gutter widths won't be recalculated.\n   */\n  update(isOnlyLayout = false) {\n    if (this.isEnabled) {\n      if (!isOnlyLayout) {\n        // Get updated colCount\n        this._setColumns();\n      }\n\n      // Layout items\n      this.sort();\n    }\n  }\n\n  /**\n   * Use this instead of `update()` if you don't need the columns and gutters updated\n   * Maybe an image inside `shuffle` loaded (and now has a height), which means calculations\n   * could be off.\n   */\n  layout() {\n    this.update(true);\n  }\n\n  /**\n   * New items have been appended to shuffle. Mix them in with the current\n   * filter or sort status.\n   * @param {Element[]} newItems Collection of new items.\n   */\n  add(newItems) {\n    const items = arrayUnique(newItems).map(el => new ShuffleItem(el));\n\n    // Add classes and set initial positions.\n    this._initItems(items);\n\n    // Determine which items will go with the current filter.\n    this._resetCols();\n\n    const allItems = this._mergeNewItems(items);\n    const sortedItems = sorter(allItems, this.lastSort);\n    const allSortedItemsSet = this._filter(this.lastFilter, sortedItems);\n\n    const isNewItem = item => items.includes(item);\n    const applyHiddenState = (item) => {\n      item.scale = ShuffleItem.Scale.HIDDEN;\n      item.isHidden = true;\n      item.applyCss(ShuffleItem.Css.HIDDEN.before);\n      item.applyCss(ShuffleItem.Css.HIDDEN.after);\n    };\n\n    // Layout all items again so that new items get positions.\n    // Synchonously apply positions.\n    const itemPositions = this._getNextPositions(allSortedItemsSet.visible);\n    allSortedItemsSet.visible.forEach((item, i) => {\n      if (isNewItem(item)) {\n        item.point = itemPositions[i];\n        applyHiddenState(item);\n        item.applyCss(this.getStylesForTransition(item, {}));\n      }\n    });\n\n    allSortedItemsSet.hidden.forEach((item) => {\n      if (isNewItem(item)) {\n        applyHiddenState(item);\n      }\n    });\n\n    // Cause layout so that the styles above are applied.\n    this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n\n    // Add transition to each item.\n    this.setItemTransitions(items);\n\n    // Update the list of items.\n    this.items = this._mergeNewItems(items);\n\n    // Update layout/visibility of new and old items.\n    this.filter(this.lastFilter);\n  }\n\n  /**\n   * Disables shuffle from updating dimensions and layout on resize\n   */\n  disable() {\n    this.isEnabled = false;\n  }\n\n  /**\n   * Enables shuffle again\n   * @param {boolean} [isUpdateLayout=true] if undefined, shuffle will update columns and gutters\n   */\n  enable(isUpdateLayout = true) {\n    this.isEnabled = true;\n    if (isUpdateLayout) {\n      this.update();\n    }\n  }\n\n  /**\n   * Remove 1 or more shuffle items.\n   * @param {Element[]} elements An array containing one or more\n   *     elements in shuffle\n   * @return {Shuffle} The shuffle instance.\n   */\n  remove(elements) {\n    if (!elements.length) {\n      return;\n    }\n\n    const collection = arrayUnique(elements);\n\n    const oldItems = collection\n      .map(element => this.getItemByElement(element))\n      .filter(item => !!item);\n\n    const handleLayout = () => {\n      this._disposeItems(oldItems);\n\n      // Remove the collection in the callback\n      collection.forEach((element) => {\n        element.parentNode.removeChild(element);\n      });\n\n      this._dispatch(Shuffle.EventType.REMOVED, { collection });\n    };\n\n    // Hide collection first.\n    this._toggleFilterClasses({\n      visible: [],\n      hidden: oldItems,\n    });\n\n    this._shrink(oldItems);\n\n    this.sort();\n\n    // Update the list of items here because `remove` could be called again\n    // with an item that is in the process of being removed.\n    this.items = this.items.filter(item => !oldItems.includes(item));\n    this._updateItemCount();\n\n    this.once(Shuffle.EventType.LAYOUT, handleLayout);\n  }\n\n  /**\n   * Retrieve a shuffle item by its element.\n   * @param {Element} element Element to look for.\n   * @return {?ShuffleItem} A shuffle item or undefined if it's not found.\n   */\n  getItemByElement(element) {\n    return this.items.find(item => item.element === element);\n  }\n\n  /**\n   * Dump the elements currently stored and reinitialize all child elements which\n   * match the `itemSelector`.\n   */\n  resetItems() {\n    // Remove refs to current items.\n    this._disposeItems(this.items);\n    this.isInitialized = false;\n\n    // Find new items in the DOM.\n    this.items = this._getItems();\n\n    // Set initial styles on the new items.\n    this._initItems(this.items);\n\n    this.once(Shuffle.EventType.LAYOUT, () => {\n      // Add transition to each item.\n      this.setItemTransitions(this.items);\n      this.isInitialized = true;\n    });\n\n    // Lay out all items.\n    this.filter(this.lastFilter);\n  }\n\n  /**\n   * Destroys shuffle, removes events, styles, and classes\n   */\n  destroy() {\n    this._cancelMovement();\n    window.removeEventListener('resize', this._onResize);\n\n    // Reset container styles\n    this.element.classList.remove('shuffle');\n    this.element.removeAttribute('style');\n\n    // Reset individual item styles\n    this._disposeItems(this.items);\n\n    this.items.length = 0;\n    this._transitions.length = 0;\n\n    // Null DOM references\n    this.options.sizer = null;\n    this.element = null;\n\n    // Set a flag so if a debounced resize has been triggered,\n    // it can first check if it is actually isDestroyed and not doing anything\n    this.isDestroyed = true;\n    this.isEnabled = false;\n  }\n\n  /**\n   * Returns the outer width of an element, optionally including its margins.\n   *\n   * There are a few different methods for getting the width of an element, none of\n   * which work perfectly for all Shuffle's use cases.\n   *\n   * 1. getBoundingClientRect() `left` and `right` properties.\n   *   - Accounts for transform scaled elements, making it useless for Shuffle\n   *   elements which have shrunk.\n   * 2. The `offsetWidth` property.\n   *   - This value stays the same regardless of the elements transform property,\n   *   however, it does not return subpixel values.\n   * 3. getComputedStyle()\n   *   - This works great Chrome, Firefox, Safari, but IE<=11 does not include\n   *   padding and border when box-sizing: border-box is set, requiring a feature\n   *   test and extra work to add the padding back for IE and other browsers which\n   *   follow the W3C spec here.\n   *\n   * @param {Element} element The element.\n   * @param {boolean} [includeMargins=false] Whether to include margins.\n   * @return {{width: number, height: number}} The width and height.\n   */\n  static getSize(element, includeMargins = false) {\n    // Store the styles so that they can be used by others without asking for it again.\n    const styles = window.getComputedStyle(element, null);\n    let width = getNumberStyle(element, 'width', styles);\n    let height = getNumberStyle(element, 'height', styles);\n\n    if (includeMargins) {\n      const marginLeft = getNumberStyle(element, 'marginLeft', styles);\n      const marginRight = getNumberStyle(element, 'marginRight', styles);\n      const marginTop = getNumberStyle(element, 'marginTop', styles);\n      const marginBottom = getNumberStyle(element, 'marginBottom', styles);\n      width += marginLeft + marginRight;\n      height += marginTop + marginBottom;\n    }\n\n    return {\n      width,\n      height,\n    };\n  }\n\n  /**\n   * Change a property or execute a function which will not have a transition\n   * @param {Element[]} elements DOM elements that won't be transitioned.\n   * @param {function} callback A function which will be called while transition\n   *     is set to 0ms.\n   * @private\n   */\n  static _skipTransitions(elements, callback) {\n    const zero = '0ms';\n\n    // Save current duration and delay.\n    const data = elements.map((element) => {\n      const { style } = element;\n      const duration = style.transitionDuration;\n      const delay = style.transitionDelay;\n\n      // Set the duration to zero so it happens immediately\n      style.transitionDuration = zero;\n      style.transitionDelay = zero;\n\n      return {\n        duration,\n        delay,\n      };\n    });\n\n    callback();\n\n    // Cause forced synchronous layout.\n    elements[0].offsetWidth; // eslint-disable-line no-unused-expressions\n\n    // Put the duration back\n    elements.forEach((element, i) => {\n      element.style.transitionDuration = data[i].duration;\n      element.style.transitionDelay = data[i].delay;\n    });\n  }\n}\n\nShuffle.ShuffleItem = ShuffleItem;\n\nShuffle.ALL_ITEMS = 'all';\nShuffle.FILTER_ATTRIBUTE_KEY = 'groups';\n\n/** @enum {string} */\nShuffle.EventType = {\n  LAYOUT: 'shuffle:layout',\n  REMOVED: 'shuffle:removed',\n};\n\n/** @enum {string} */\nShuffle.Classes = Classes;\n\n/** @enum {string} */\nShuffle.FilterMode = {\n  ANY: 'any',\n  ALL: 'all',\n};\n\n// Overrideable options\nShuffle.options = {\n  // Initial filter group.\n  group: Shuffle.ALL_ITEMS,\n\n  // Transition/animation speed (milliseconds).\n  speed: 250,\n\n  // CSS easing function to use.\n  easing: 'cubic-bezier(0.4, 0.0, 0.2, 1)',\n\n  // e.g. '.picture-item'.\n  itemSelector: '*',\n\n  // Element or selector string. Use an element to determine the size of columns\n  // and gutters.\n  sizer: null,\n\n  // A static number or function that tells the plugin how wide the gutters\n  // between columns are (in pixels).\n  gutterWidth: 0,\n\n  // A static number or function that returns a number which tells the plugin\n  // how wide the columns are (in pixels).\n  columnWidth: 0,\n\n  // If your group is not json, and is comma delimeted, you could set delimiter\n  // to ','.\n  delimiter: null,\n\n  // Useful for percentage based heights when they might not always be exactly\n  // the same (in pixels).\n  buffer: 0,\n\n  // Reading the width of elements isn't precise enough and can cause columns to\n  // jump between values.\n  columnThreshold: 0.01,\n\n  // Shuffle can be isInitialized with a sort object. It is the same object\n  // given to the sort method.\n  initialSort: null,\n\n  // By default, shuffle will throttle resize events. This can be changed or\n  // removed.\n  throttle,\n\n  // How often shuffle can be called on resize (in milliseconds).\n  throttleTime: 300,\n\n  // Transition delay offset for each item in milliseconds.\n  staggerAmount: 15,\n\n  // Maximum stagger delay in milliseconds.\n  staggerAmountMax: 150,\n\n  // Whether to use transforms or absolute positioning.\n  useTransforms: true,\n\n  // Affects using an array with filter. e.g. `filter(['one', 'two'])`. With \"any\",\n  // the element passes the test if any of its groups are in the array. With \"all\",\n  // the element only passes if all groups are in the array.\n  filterMode: Shuffle.FilterMode.ANY,\n\n  // Attempt to center grid items in each row.\n  isCentered: false,\n\n  // Whether to round pixel values used in translate(x, y). This usually avoids\n  // blurriness.\n  roundTransforms: true,\n};\n\nShuffle.Point = Point;\nShuffle.Rect = Rect;\n\n// Expose for testing. Hack at your own risk.\nShuffle.__sorter = sorter;\nShuffle.__getColumnSpan = getColumnSpan;\nShuffle.__getAvailablePositions = getAvailablePositions;\nShuffle.__getShortColumn = getShortColumn;\nShuffle.__getCenteredPositions = getCenteredPositions;\n\nexport default Shuffle;\n"]},"metadata":{},"sourceType":"module"}